/**
 * generated by Xtext 2.21.0
 */
package org.xtext.mdsd.arduino.boardgenerator.validation;

import org.eclipse.xtext.validation.Check;
import org.xtext.mdsd.arduino.boardgenerator.ioT.Expression;
import org.xtext.mdsd.arduino.boardgenerator.ioT.ExternalSensor;
import org.xtext.mdsd.arduino.boardgenerator.ioT.IoTPackage;
import org.xtext.mdsd.arduino.boardgenerator.ioT.Model;
import org.xtext.mdsd.arduino.boardgenerator.ioT.Sensor;
import org.xtext.mdsd.arduino.boardgenerator.ioT.SensorType;
import org.xtext.mdsd.arduino.boardgenerator.validation.AbstractIoTValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class IoTValidator extends AbstractIoTValidator {
  @Check
  public void validateExternalSensor(final Sensor sensor) {
    final SensorType externalSensor = sensor.getSensortype();
    if ((externalSensor instanceof ExternalSensor)) {
      int _size = ((ExternalSensor)externalSensor).getPins().size();
      int _size_1 = sensor.getVars().getIds().size();
      boolean _notEquals = (_size != _size_1);
      if (_notEquals) {
        this.error("number of vars must equal number of pins", IoTPackage.Literals.SENSOR__VARS);
      }
      final int vcc = sensor.getVcc();
      if ((vcc < 1)) {
        this.error("this declaration of sensor needs vcc", IoTPackage.eINSTANCE.getSensor_Name());
      }
    }
  }
  
  @Check
  public Object validatePipeLine(final Expression expression) {
    return null;
  }
  
  @Check
  public Object validateOnboardSensor(final Model model) {
    return null;
  }
}
