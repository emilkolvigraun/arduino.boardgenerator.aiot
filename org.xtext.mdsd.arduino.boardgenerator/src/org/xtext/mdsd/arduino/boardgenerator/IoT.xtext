grammar org.xtext.mdsd.arduino.boardgenerator.IoT with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ioT "http://www.xtext.org/mdsd/arduino/boardgenerator/IoT"

// Includes are zero or more
// Channels are zero or more (in case they are imported)
// Boards are zero or more   
Model: 
	includes+=Include* wifiConfig+=WifiConfig* channel+=Channel* function+=Function* abstractBoard+=AbstractBoard* board+=Board*;

// Includes = imports  
// I don't want the developer to write a string, so this will be parsed
Include:  
	'include' importURI+=ID ('.' importURI+=ID)*;
	 
ImportObject: 
	importURI=STRING;
 
// I realize that the channel grammar is very loose.
// The plan is to use the validator to verify that one or the other has been used.
 
WifiConfig: 
	'wifi' name=ID ':' BEGIN
		'ssid' ssid=STRING 
		('pass' pass=STRING)?
	END ;
 
Channel:  
	(ctype=ChannelType)? 'channel' name=ID (':' BEGIN 
		config=ChannelConfig
	END)?;   
 
ChannelType: 
	name=ID;
 
ChannelConfig:
	Wifi | Serial | MqttClient;

Wifi:
	'ip'    url=STRING
	'port'  sport=INT
	'route' route=STRING;
 
Serial:  
	'baud' baud=INT 
	'stop' stopType=StopIdentifyer;  

StopIdentifyer:
	StopChar | StopByte;
     
StopChar:
	'char' name=STRING;
 
StopByte:
	'byte' name=INT;

MqttClient: 
	'broker'broker=STRING  
	'port'	port=INT
	'id'    client=STRING   
	'topic' '[' pub+=STRING (',' pub+=STRING)? ']' ;  
  
Function:
	'function' name=ID '(' input+=FunctionInputType (',' input+=FunctionInputType)*  ')' '->' '(' output+=ID (',' output+=ID)*  ')';
   
FunctionInputType:  
	 name=ID  ;

// board can either extend another or is new
Board:
	'board' (NewBoard | ExtendsBoard);

// Sensor is one or more
NewBoard:
	name=ID ':' BEGIN
		version=BoardVersion 
		('wifi' wifiSelect=[WifiConfig])? 
		sensors+=Sensor+
	END;
 
BoardVersion:
	'type' type=ID  
	'model' model=ID;   
  
// Can extend another board, in that case needs only reference
ExtendsBoard:
	name=ID 'extends' abstractBoard=[AbstractBoard] (':' BEGIN
		('wifi' wifiSelect=[WifiConfig])?
		(sensors+=Sensor+)?
		 END)?;   

// ...
AbstractBoard: 
	'abstract' 'board' name=ID ':' BEGIN
		version=BoardVersion
		sensors+=Sensor+ 
	END;

Sensor:
	'sensor' name=ID '=' sensortype=SensorType 'as' vars=SensorVariables ':' BEGIN
		('sample' sampler+=Sampler)?  
		('vcc' vcc=INT)? 
		output+=SensorOutput+ 
	END;
 
SensorType:
	ExternalSensor | OnboardSensor;
  
ExternalSensor:
	name=ID '('pins+=INT (',' pins+=INT)* ')';

OnboardSensor: 
	name=ID;

SensorVariables:
	name=ID '(' ids+=Variable (',' ids+=Variable)* ')'; 

Variable:
	name=ID;

Sampler:
	Command | Frequency;

Command:
	'command' command=STRING topic=STRING?;

Frequency: 
	'frequency' frequency=INT resolution=Resolution;

Resolution:
	({Seconds} 'seconds' | {Millis} 'milliseconds' | {Micros} 'microseconds');
	 
SensorOutput: 
	'pipe' output=DataOutput '->' channel+=[Channel] ('and' channel+=[Channel])*;   
    
DataOutput:
	sensorvar=[SensorVariables] (pipeline=Pipeline)?; 

Pipeline: 
	'.' (TuplePipeline | MapPipeline | WindowPipeline | External ) (next=Pipeline)?; 
 
// external function can be added
// validator verifyes whether input is valid
External:  
	function=[Function] '[' input+=Expression (',' input+=Expression)* ']'; 

TuplePipeline:
	({Filter} 'filter' | {Abs} 'abs') '[' expression=Expression ']';
	
MapPipeline:
	{Map} 'map' '[' expression=Expression '->' output=Variable ']';

WindowPipeline:
	{Window} 'byWindow' '[' width=INT ']' '.' execute=ExecutePipeline;

ExecutePipeline:
	{Reduce}'reduce'| 
	{Mean} 	'mean' 	|
	{Median}'median'|
	{StDev} 'stdev' |
	{Min} 	'min' 	|
	{Max} 	'max' 	|
	{Count} 'count'	|
	{Var} 	'var'	;

// The expression rules are loose allowing for meaningless expressions to be
// formed. Well-typedness will be ensured using validators
Expression:
	Conditional;

// 4 == 4 ? yes : no, is per definition right associative
Conditional returns Expression:
	Or ({Conditional.condition=current} '?' correct=Conditional ':' incorrect=Conditional)?;

// Implemented in a right-associative way just as an example - associativity
// does not matter for && and ||
Or returns Expression:
	And ({Or.left=current} '||' right=Or)?;

And returns Expression:
	Equality ({And.left=current} '&&' right=And)?;

Equality returns Expression:
	Comparison ({Equal.left=current} '==' right=Comparison | {Unequal.left = current} '!=' right=Comparison)*;

Comparison returns Expression:
	SubAdd ({LessThan.left=current} '<' right=SubAdd | {LessThanEqual.left=current} '<=' right=SubAdd | {GreaterThan.left=current} '>' right=SubAdd | {GreaterThanEqual.left=current} '>=' right=SubAdd)*;

SubAdd returns Expression:
	MulDiv ({Plus.left=current} '+' right=MulDiv | {Minus.left=current} '-' right=MulDiv)*;

MulDiv returns Expression:
	Negation ({Mul.left=current} '*' right=Negation | {Div.left=current} '/' right=Negation)*;

Negation returns Expression:
    {Negation} '-' value=Exponent | Exponent;

// Exponentiation is right-associative!
// That is why the rule refers to itself (or its parent) on the right of the operator
Exponent returns Expression:
    Not ({Exponent.base=current} '**' power=Negation)?;
 
Not returns Expression:
	{Not} '!' value=Primary | Primary ;

Primary returns Expression:
	'('Expression')' | Reference | NumberLiteral | BooleanLiteral | StringLiteral;
 
Reference:
	ref=ID; 

StringLiteral: 
	str=STRING;

NumberLiteral:
	numb=NUMBER; 
 
BooleanLiteral:
	bool=BOOLEAN;

terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override 
terminal INT returns ecore::EInt:
	'0' | ('1'..'9')('0'..'9')*;

terminal NINT returns ecore::EInt:
	'-' ('0' | ('1'..'9')('0'..'9')*);


terminal DBL returns ecore::EDouble:
	INT? '.'('0'..'9')+; 
	 
terminal NDBL returns ecore::EDouble:
	'-' (INT? '.'('0'..'9')+);
 
terminal BOOLEAN returns ecore::EBoolean: 
	'true' | 'false' | 'True' | 'False';

@Override 
terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;
@Override  
terminal ML_COMMENT : '#*' -> '*#';


NUMBER hidden():
	INT | DBL | NINT | NDBL;
