/*
 * generated by Xtext 2.21.0
 */
parser grammar InternalIoTParser;

options {
	tokenVocab=InternalIoTLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.xtext.mdsd.arduino.boardgenerator.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.mdsd.arduino.boardgenerator.services.IoTGrammarAccess;

}

@members {

 	private IoTGrammarAccess grammarAccess;

    public InternalIoTParser(TokenStream input, IoTGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected IoTGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getIncludesIncludeParserRuleCall_0_0());
				}
				lv_includes_0_0=ruleInclude
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"includes",
						lv_includes_0_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Include");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getWifiConfigWifiConfigParserRuleCall_1_0());
				}
				lv_wifiConfig_1_0=ruleWifiConfig
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"wifiConfig",
						lv_wifiConfig_1_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.WifiConfig");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getChannelChannelParserRuleCall_2_0());
				}
				lv_channel_2_0=ruleChannel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"channel",
						lv_channel_2_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Channel");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFunctionFunctionParserRuleCall_3_0());
				}
				lv_function_3_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"function",
						lv_function_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getAbstractBoardAbstractBoardParserRuleCall_4_0());
				}
				lv_abstractBoard_4_0=ruleAbstractBoard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"abstractBoard",
						lv_abstractBoard_4_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.AbstractBoard");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getBoardBoardParserRuleCall_5_0());
				}
				lv_board_5_0=ruleBoard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"board",
						lv_board_5_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Board");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current; }
	EOF;

// Rule Include
ruleInclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Include
		{
			newLeafNode(otherlv_0, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
		}
		(
			(
				lv_importURI_1_0=RULE_ID
				{
					newLeafNode(lv_importURI_1_0, grammarAccess.getIncludeAccess().getImportURIIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIncludeRule());
					}
					addWithLastConsumed(
						$current,
						"importURI",
						lv_importURI_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=FullStop
			{
				newLeafNode(otherlv_2, grammarAccess.getIncludeAccess().getFullStopKeyword_2_0());
			}
			(
				(
					lv_importURI_3_0=RULE_ID
					{
						newLeafNode(lv_importURI_3_0, grammarAccess.getIncludeAccess().getImportURIIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIncludeRule());
						}
						addWithLastConsumed(
							$current,
							"importURI",
							lv_importURI_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWifiConfig
entryRuleWifiConfig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWifiConfigRule()); }
	iv_ruleWifiConfig=ruleWifiConfig
	{ $current=$iv_ruleWifiConfig.current; }
	EOF;

// Rule WifiConfig
ruleWifiConfig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Wifi
		{
			newLeafNode(otherlv_0, grammarAccess.getWifiConfigAccess().getWifiKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWifiConfigAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWifiConfigRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getWifiConfigAccess().getColonKeyword_2());
		}
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getWifiConfigAccess().getBEGINTerminalRuleCall_3());
		}
		otherlv_4=Ssid
		{
			newLeafNode(otherlv_4, grammarAccess.getWifiConfigAccess().getSsidKeyword_4());
		}
		(
			(
				lv_ssid_5_0=RULE_STRING
				{
					newLeafNode(lv_ssid_5_0, grammarAccess.getWifiConfigAccess().getSsidSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWifiConfigRule());
					}
					setWithLastConsumed(
						$current,
						"ssid",
						lv_ssid_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_6=Pass
			{
				newLeafNode(otherlv_6, grammarAccess.getWifiConfigAccess().getPassKeyword_6_0());
			}
			(
				(
					lv_pass_7_0=RULE_STRING
					{
						newLeafNode(lv_pass_7_0, grammarAccess.getWifiConfigAccess().getPassSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWifiConfigRule());
						}
						setWithLastConsumed(
							$current,
							"pass",
							lv_pass_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		this_END_8=RULE_END
		{
			newLeafNode(this_END_8, grammarAccess.getWifiConfigAccess().getENDTerminalRuleCall_7());
		}
	)
;

// Entry rule entryRuleChannel
entryRuleChannel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelRule()); }
	iv_ruleChannel=ruleChannel
	{ $current=$iv_ruleChannel.current; }
	EOF;

// Rule Channel
ruleChannel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Channel
		{
			newLeafNode(otherlv_0, grammarAccess.getChannelAccess().getChannelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getChannelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChannelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=Colon
			{
				newLeafNode(otherlv_2, grammarAccess.getChannelAccess().getColonKeyword_2_0());
			}
			this_BEGIN_3=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_3, grammarAccess.getChannelAccess().getBEGINTerminalRuleCall_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChannelAccess().getConfigChannelConfigParserRuleCall_2_2_0());
					}
					lv_config_4_0=ruleChannelConfig
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChannelRule());
						}
						set(
							$current,
							"config",
							lv_config_4_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.ChannelConfig");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_END_5=RULE_END
			{
				newLeafNode(this_END_5, grammarAccess.getChannelAccess().getENDTerminalRuleCall_2_3());
			}
		)?
	)
;

// Entry rule entryRuleChannelConfig
entryRuleChannelConfig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelConfigRule()); }
	iv_ruleChannelConfig=ruleChannelConfig
	{ $current=$iv_ruleChannelConfig.current; }
	EOF;

// Rule ChannelConfig
ruleChannelConfig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getChannelConfigAccess().getWifiParserRuleCall_0());
		}
		this_Wifi_0=ruleWifi
		{
			$current = $this_Wifi_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getChannelConfigAccess().getSerialParserRuleCall_1());
		}
		this_Serial_1=ruleSerial
		{
			$current = $this_Serial_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getChannelConfigAccess().getMqttClientParserRuleCall_2());
		}
		this_MqttClient_2=ruleMqttClient
		{
			$current = $this_MqttClient_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWifi
entryRuleWifi returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWifiRule()); }
	iv_ruleWifi=ruleWifi
	{ $current=$iv_ruleWifi.current; }
	EOF;

// Rule Wifi
ruleWifi returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Url
		{
			newLeafNode(otherlv_0, grammarAccess.getWifiAccess().getUrlKeyword_0());
		}
		(
			(
				lv_url_1_0=RULE_STRING
				{
					newLeafNode(lv_url_1_0, grammarAccess.getWifiAccess().getUrlSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWifiRule());
					}
					setWithLastConsumed(
						$current,
						"url",
						lv_url_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=Route
		{
			newLeafNode(otherlv_2, grammarAccess.getWifiAccess().getRouteKeyword_2());
		}
		(
			(
				lv_route_3_0=RULE_STRING
				{
					newLeafNode(lv_route_3_0, grammarAccess.getWifiAccess().getRouteSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWifiRule());
					}
					setWithLastConsumed(
						$current,
						"route",
						lv_route_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSerial
entryRuleSerial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSerialRule()); }
	iv_ruleSerial=ruleSerial
	{ $current=$iv_ruleSerial.current; }
	EOF;

// Rule Serial
ruleSerial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Baud
		{
			newLeafNode(otherlv_0, grammarAccess.getSerialAccess().getBaudKeyword_0());
		}
		(
			(
				lv_baud_1_0=RULE_INT
				{
					newLeafNode(lv_baud_1_0, grammarAccess.getSerialAccess().getBaudINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSerialRule());
					}
					setWithLastConsumed(
						$current,
						"baud",
						lv_baud_1_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
				}
			)
		)
		otherlv_2=Stop
		{
			newLeafNode(otherlv_2, grammarAccess.getSerialAccess().getStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSerialAccess().getStopStopCharParserRuleCall_3_0());
				}
				lv_stop_3_0=rulestopChar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSerialRule());
					}
					set(
						$current,
						"stop",
						lv_stop_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.stopChar");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestopChar
entryRulestopChar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopCharRule()); }
	iv_rulestopChar=rulestopChar
	{ $current=$iv_rulestopChar.current; }
	EOF;

// Rule stopChar
rulestopChar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStopCharAccess().getCharAction_0_0(),
						$current);
				}
			)
			otherlv_1=Char
			{
				newLeafNode(otherlv_1, grammarAccess.getStopCharAccess().getCharKeyword_0_1());
			}
			(
				(
					lv_name_2_0=RULE_STRING
					{
						newLeafNode(lv_name_2_0, grammarAccess.getStopCharAccess().getNameSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStopCharRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStopCharAccess().getByteAction_1_0(),
						$current);
				}
			)
			otherlv_4=Byte
			{
				newLeafNode(otherlv_4, grammarAccess.getStopCharAccess().getByteKeyword_1_1());
			}
			(
				(
					lv_name_5_0=RULE_INT
					{
						newLeafNode(lv_name_5_0, grammarAccess.getStopCharAccess().getNameINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStopCharRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_5_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMqttClient
entryRuleMqttClient returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMqttClientRule()); }
	iv_ruleMqttClient=ruleMqttClient
	{ $current=$iv_ruleMqttClient.current; }
	EOF;

// Rule MqttClient
ruleMqttClient returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Broker
		{
			newLeafNode(otherlv_0, grammarAccess.getMqttClientAccess().getBrokerKeyword_0());
		}
		(
			(
				lv_broker_1_0=RULE_STRING
				{
					newLeafNode(lv_broker_1_0, grammarAccess.getMqttClientAccess().getBrokerSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMqttClientRule());
					}
					setWithLastConsumed(
						$current,
						"broker",
						lv_broker_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2=Port
		{
			newLeafNode(otherlv_2, grammarAccess.getMqttClientAccess().getPortKeyword_2());
		}
		(
			(
				lv_port_3_0=RULE_INT
				{
					newLeafNode(lv_port_3_0, grammarAccess.getMqttClientAccess().getPortINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMqttClientRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
				}
			)
		)
		otherlv_4=Id
		{
			newLeafNode(otherlv_4, grammarAccess.getMqttClientAccess().getIdKeyword_4());
		}
		(
			(
				lv_client_5_0=RULE_STRING
				{
					newLeafNode(lv_client_5_0, grammarAccess.getMqttClientAccess().getClientSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMqttClientRule());
					}
					setWithLastConsumed(
						$current,
						"client",
						lv_client_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6=Topic
		{
			newLeafNode(otherlv_6, grammarAccess.getMqttClientAccess().getTopicKeyword_6());
		}
		(
			(
				lv_pub_7_0=RULE_STRING
				{
					newLeafNode(lv_pub_7_0, grammarAccess.getMqttClientAccess().getPubSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMqttClientRule());
					}
					setWithLastConsumed(
						$current,
						"pub",
						lv_pub_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Function
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getInputFunctionInputTypeParserRuleCall_3_0());
				}
				lv_input_3_0=ruleFunctionInputType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"input",
						lv_input_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.FunctionInputType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=Comma
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getInputFunctionInputTypeParserRuleCall_4_1_0());
					}
					lv_input_5_0=ruleFunctionInputType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"input",
							lv_input_5_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.FunctionInputType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7=HyphenMinusGreaterThanSign
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getHyphenMinusGreaterThanSignKeyword_6());
		}
		otherlv_8=LeftParenthesis
		{
			newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_7());
		}
		(
			(
				lv_output_9_0=RULE_ID
				{
					newLeafNode(lv_output_9_0, grammarAccess.getFunctionAccess().getOutputIDTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					addWithLastConsumed(
						$current,
						"output",
						lv_output_9_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_10=Comma
			{
				newLeafNode(otherlv_10, grammarAccess.getFunctionAccess().getCommaKeyword_9_0());
			}
			(
				(
					lv_output_11_0=RULE_ID
					{
						newLeafNode(lv_output_11_0, grammarAccess.getFunctionAccess().getOutputIDTerminalRuleCall_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						addWithLastConsumed(
							$current,
							"output",
							lv_output_11_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		otherlv_12=RightParenthesis
		{
			newLeafNode(otherlv_12, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_10());
		}
	)
;

// Entry rule entryRuleFunctionInputType
entryRuleFunctionInputType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionInputTypeRule()); }
	iv_ruleFunctionInputType=ruleFunctionInputType
	{ $current=$iv_ruleFunctionInputType.current; }
	EOF;

// Rule FunctionInputType
ruleFunctionInputType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionInputTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionInputTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBoard
entryRuleBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardRule()); }
	iv_ruleBoard=ruleBoard
	{ $current=$iv_ruleBoard.current; }
	EOF;

// Rule Board
ruleBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Board
		{
			newLeafNode(otherlv_0, grammarAccess.getBoardAccess().getBoardKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getBoardAccess().getNewBoardParserRuleCall_1_0());
			}
			this_NewBoard_1=ruleNewBoard
			{
				$current = $this_NewBoard_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getBoardAccess().getExtendsBoardParserRuleCall_1_1());
			}
			this_ExtendsBoard_2=ruleExtendsBoard
			{
				$current = $this_ExtendsBoard_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNewBoard
entryRuleNewBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewBoardRule()); }
	iv_ruleNewBoard=ruleNewBoard
	{ $current=$iv_ruleNewBoard.current; }
	EOF;

// Rule NewBoard
ruleNewBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getNewBoardAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNewBoardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getNewBoardAccess().getColonKeyword_1());
		}
		this_BEGIN_2=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_2, grammarAccess.getNewBoardAccess().getBEGINTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewBoardAccess().getVersionBoardVersionParserRuleCall_3_0());
				}
				lv_version_3_0=ruleBoardVersion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewBoardRule());
					}
					set(
						$current,
						"version",
						lv_version_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.BoardVersion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=Wifi
			{
				newLeafNode(otherlv_4, grammarAccess.getNewBoardAccess().getWifiKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNewBoardRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getNewBoardAccess().getWifiSelectWifiConfigCrossReference_4_1_0());
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNewBoardAccess().getSensorsSensorParserRuleCall_5_0());
				}
				lv_sensors_6_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewBoardRule());
					}
					add(
						$current,
						"sensors",
						lv_sensors_6_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		this_END_7=RULE_END
		{
			newLeafNode(this_END_7, grammarAccess.getNewBoardAccess().getENDTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleBoardVersion
entryRuleBoardVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoardVersionRule()); }
	iv_ruleBoardVersion=ruleBoardVersion
	{ $current=$iv_ruleBoardVersion.current; }
	EOF;

// Rule BoardVersion
ruleBoardVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Type
		{
			newLeafNode(otherlv_0, grammarAccess.getBoardVersionAccess().getTypeKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getBoardVersionAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoardVersionRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=Model
		{
			newLeafNode(otherlv_2, grammarAccess.getBoardVersionAccess().getModelKeyword_2());
		}
		(
			(
				lv_model_3_0=RULE_ID
				{
					newLeafNode(lv_model_3_0, grammarAccess.getBoardVersionAccess().getModelIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBoardVersionRule());
					}
					setWithLastConsumed(
						$current,
						"model",
						lv_model_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleExtendsBoard
entryRuleExtendsBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtendsBoardRule()); }
	iv_ruleExtendsBoard=ruleExtendsBoard
	{ $current=$iv_ruleExtendsBoard.current; }
	EOF;

// Rule ExtendsBoard
ruleExtendsBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getExtendsBoardAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtendsBoardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=Extends
		{
			newLeafNode(otherlv_1, grammarAccess.getExtendsBoardAccess().getExtendsKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtendsBoardRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getExtendsBoardAccess().getAbstractBoardAbstractBoardCrossReference_2_0());
				}
			)
		)
		(
			otherlv_3=Colon
			{
				newLeafNode(otherlv_3, grammarAccess.getExtendsBoardAccess().getColonKeyword_3_0());
			}
			this_BEGIN_4=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_4, grammarAccess.getExtendsBoardAccess().getBEGINTerminalRuleCall_3_1());
			}
			(
				otherlv_5=Wifi
				{
					newLeafNode(otherlv_5, grammarAccess.getExtendsBoardAccess().getWifiKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExtendsBoardRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getExtendsBoardAccess().getWifiSelectWifiConfigCrossReference_3_2_1_0());
						}
					)
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getExtendsBoardAccess().getSensorsSensorParserRuleCall_3_3_0());
					}
					lv_sensors_7_0=ruleSensor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExtendsBoardRule());
						}
						add(
							$current,
							"sensors",
							lv_sensors_7_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Sensor");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			this_END_8=RULE_END
			{
				newLeafNode(this_END_8, grammarAccess.getExtendsBoardAccess().getENDTerminalRuleCall_3_4());
			}
		)?
	)
;

// Entry rule entryRuleAbstractBoard
entryRuleAbstractBoard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractBoardRule()); }
	iv_ruleAbstractBoard=ruleAbstractBoard
	{ $current=$iv_ruleAbstractBoard.current; }
	EOF;

// Rule AbstractBoard
ruleAbstractBoard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Abstract
		{
			newLeafNode(otherlv_0, grammarAccess.getAbstractBoardAccess().getAbstractKeyword_0());
		}
		otherlv_1=Board
		{
			newLeafNode(otherlv_1, grammarAccess.getAbstractBoardAccess().getBoardKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAbstractBoardAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAbstractBoardRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=Colon
		{
			newLeafNode(otherlv_3, grammarAccess.getAbstractBoardAccess().getColonKeyword_3());
		}
		this_BEGIN_4=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_4, grammarAccess.getAbstractBoardAccess().getBEGINTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractBoardAccess().getVersionBoardVersionParserRuleCall_5_0());
				}
				lv_version_5_0=ruleBoardVersion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractBoardRule());
					}
					set(
						$current,
						"version",
						lv_version_5_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.BoardVersion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractBoardAccess().getSensorsSensorParserRuleCall_6_0());
				}
				lv_sensors_6_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractBoardRule());
					}
					add(
						$current,
						"sensors",
						lv_sensors_6_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		this_END_7=RULE_END
		{
			newLeafNode(this_END_7, grammarAccess.getAbstractBoardAccess().getENDTerminalRuleCall_7());
		}
	)
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Sensor
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorAccess().getSensorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=EqualsSign
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getSensortypeSensorTypeParserRuleCall_3_0());
				}
				lv_sensortype_3_0=ruleSensorType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"sensortype",
						lv_sensortype_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.SensorType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=As
		{
			newLeafNode(otherlv_4, grammarAccess.getSensorAccess().getAsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getVarsSensorVariablesParserRuleCall_5_0());
				}
				lv_vars_5_0=ruleSensorVariables
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					set(
						$current,
						"vars",
						lv_vars_5_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.SensorVariables");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=Colon
		{
			newLeafNode(otherlv_6, grammarAccess.getSensorAccess().getColonKeyword_6());
		}
		this_BEGIN_7=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_7, grammarAccess.getSensorAccess().getBEGINTerminalRuleCall_7());
		}
		(
			otherlv_8=Sample
			{
				newLeafNode(otherlv_8, grammarAccess.getSensorAccess().getSampleKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorAccess().getSamplerSamplerParserRuleCall_8_1_0());
					}
					lv_sampler_9_0=ruleSampler
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorRule());
						}
						add(
							$current,
							"sampler",
							lv_sampler_9_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Sampler");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10=Vcc
			{
				newLeafNode(otherlv_10, grammarAccess.getSensorAccess().getVccKeyword_9_0());
			}
			(
				(
					lv_vcc_11_0=RULE_INT
					{
						newLeafNode(lv_vcc_11_0, grammarAccess.getSensorAccess().getVccINTTerminalRuleCall_9_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorRule());
						}
						setWithLastConsumed(
							$current,
							"vcc",
							lv_vcc_11_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorAccess().getOutputSensorOutputParserRuleCall_10_0());
				}
				lv_output_12_0=ruleSensorOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorRule());
					}
					add(
						$current,
						"output",
						lv_output_12_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.SensorOutput");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		this_END_13=RULE_END
		{
			newLeafNode(this_END_13, grammarAccess.getSensorAccess().getENDTerminalRuleCall_11());
		}
	)
;

// Entry rule entryRuleSensorType
entryRuleSensorType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorTypeRule()); }
	iv_ruleSensorType=ruleSensorType
	{ $current=$iv_ruleSensorType.current; }
	EOF;

// Rule SensorType
ruleSensorType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSensorTypeAccess().getExternalSensorParserRuleCall_0());
		}
		this_ExternalSensor_0=ruleExternalSensor
		{
			$current = $this_ExternalSensor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSensorTypeAccess().getOnboardSensorParserRuleCall_1());
		}
		this_OnboardSensor_1=ruleOnboardSensor
		{
			$current = $this_OnboardSensor_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExternalSensor
entryRuleExternalSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalSensorRule()); }
	iv_ruleExternalSensor=ruleExternalSensor
	{ $current=$iv_ruleExternalSensor.current; }
	EOF;

// Rule ExternalSensor
ruleExternalSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getExternalSensorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalSensorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalSensorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_pins_2_0=RULE_INT
				{
					newLeafNode(lv_pins_2_0, grammarAccess.getExternalSensorAccess().getPinsINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalSensorRule());
					}
					addWithLastConsumed(
						$current,
						"pins",
						lv_pins_2_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
				}
			)
		)
		(
			otherlv_3=Comma
			{
				newLeafNode(otherlv_3, grammarAccess.getExternalSensorAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_pins_4_0=RULE_INT
					{
						newLeafNode(lv_pins_4_0, grammarAccess.getExternalSensorAccess().getPinsINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExternalSensorRule());
						}
						addWithLastConsumed(
							$current,
							"pins",
							lv_pins_4_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
					}
				)
			)
		)*
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalSensorAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleOnboardSensor
entryRuleOnboardSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOnboardSensorRule()); }
	iv_ruleOnboardSensor=ruleOnboardSensor
	{ $current=$iv_ruleOnboardSensor.current; }
	EOF;

// Rule OnboardSensor
ruleOnboardSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getOnboardSensorAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOnboardSensorRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSensorVariables
entryRuleSensorVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorVariablesRule()); }
	iv_ruleSensorVariables=ruleSensorVariables
	{ $current=$iv_ruleSensorVariables.current; }
	EOF;

// Rule SensorVariables
ruleSensorVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSensorVariablesAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorVariablesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getSensorVariablesAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorVariablesAccess().getIdsVariableParserRuleCall_2_0());
				}
				lv_ids_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorVariablesRule());
					}
					add(
						$current,
						"ids",
						lv_ids_2_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Comma
			{
				newLeafNode(otherlv_3, grammarAccess.getSensorVariablesAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSensorVariablesAccess().getIdsVariableParserRuleCall_3_1_0());
					}
					lv_ids_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSensorVariablesRule());
						}
						add(
							$current,
							"ids",
							lv_ids_4_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getSensorVariablesAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSampler
entryRuleSampler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSamplerRule()); }
	iv_ruleSampler=ruleSampler
	{ $current=$iv_ruleSampler.current; }
	EOF;

// Rule Sampler
ruleSampler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSamplerAccess().getCommandParserRuleCall_0());
		}
		this_Command_0=ruleCommand
		{
			$current = $this_Command_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSamplerAccess().getFrequencyParserRuleCall_1());
		}
		this_Frequency_1=ruleFrequency
		{
			$current = $this_Frequency_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Command
		{
			newLeafNode(otherlv_0, grammarAccess.getCommandAccess().getCommandKeyword_0());
		}
		(
			(
				lv_command_1_0=RULE_STRING
				{
					newLeafNode(lv_command_1_0, grammarAccess.getCommandAccess().getCommandSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandRule());
					}
					setWithLastConsumed(
						$current,
						"command",
						lv_command_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_topic_2_0=RULE_STRING
				{
					newLeafNode(lv_topic_2_0, grammarAccess.getCommandAccess().getTopicSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandRule());
					}
					setWithLastConsumed(
						$current,
						"topic",
						lv_topic_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleFrequency
entryRuleFrequency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFrequencyRule()); }
	iv_ruleFrequency=ruleFrequency
	{ $current=$iv_ruleFrequency.current; }
	EOF;

// Rule Frequency
ruleFrequency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Frequency
		{
			newLeafNode(otherlv_0, grammarAccess.getFrequencyAccess().getFrequencyKeyword_0());
		}
		(
			(
				lv_frequency_1_0=RULE_INT
				{
					newLeafNode(lv_frequency_1_0, grammarAccess.getFrequencyAccess().getFrequencyINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFrequencyRule());
					}
					setWithLastConsumed(
						$current,
						"frequency",
						lv_frequency_1_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFrequencyAccess().getResolutionResolutionParserRuleCall_2_0());
				}
				lv_resolution_2_0=ruleResolution
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFrequencyRule());
					}
					set(
						$current,
						"resolution",
						lv_resolution_2_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Resolution");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleResolution
entryRuleResolution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResolutionRule()); }
	iv_ruleResolution=ruleResolution
	{ $current=$iv_ruleResolution.current; }
	EOF;

// Rule Resolution
ruleResolution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getResolutionAccess().getSecondsAction_0_0(),
						$current);
				}
			)
			otherlv_1=Seconds
			{
				newLeafNode(otherlv_1, grammarAccess.getResolutionAccess().getSecondsKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getResolutionAccess().getMillisAction_1_0(),
						$current);
				}
			)
			otherlv_3=Milliseconds
			{
				newLeafNode(otherlv_3, grammarAccess.getResolutionAccess().getMillisecondsKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getResolutionAccess().getMicrosAction_2_0(),
						$current);
				}
			)
			otherlv_5=Microseconds
			{
				newLeafNode(otherlv_5, grammarAccess.getResolutionAccess().getMicrosecondsKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleSensorOutput
entryRuleSensorOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorOutputRule()); }
	iv_ruleSensorOutput=ruleSensorOutput
	{ $current=$iv_ruleSensorOutput.current; }
	EOF;

// Rule SensorOutput
ruleSensorOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Pipe
		{
			newLeafNode(otherlv_0, grammarAccess.getSensorOutputAccess().getPipeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSensorOutputAccess().getOutputDataOutputParserRuleCall_1_0());
				}
				lv_output_1_0=ruleDataOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSensorOutputRule());
					}
					set(
						$current,
						"output",
						lv_output_1_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.DataOutput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=HyphenMinusGreaterThanSign
		{
			newLeafNode(otherlv_2, grammarAccess.getSensorOutputAccess().getHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSensorOutputRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSensorOutputAccess().getChannelChannelCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4=And
			{
				newLeafNode(otherlv_4, grammarAccess.getSensorOutputAccess().getAndKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSensorOutputRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getSensorOutputAccess().getChannelChannelCrossReference_4_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDataOutput
entryRuleDataOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataOutputRule()); }
	iv_ruleDataOutput=ruleDataOutput
	{ $current=$iv_ruleDataOutput.current; }
	EOF;

// Rule DataOutput
ruleDataOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataOutputRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getDataOutputAccess().getSensorvarSensorVariablesCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDataOutputAccess().getPipelinePipelineParserRuleCall_1_0());
				}
				lv_pipeline_1_0=rulePipeline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataOutputRule());
					}
					set(
						$current,
						"pipeline",
						lv_pipeline_1_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Pipeline");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePipeline
entryRulePipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPipelineRule()); }
	iv_rulePipeline=rulePipeline
	{ $current=$iv_rulePipeline.current; }
	EOF;

// Rule Pipeline
rulePipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=FullStop
		{
			newLeafNode(otherlv_0, grammarAccess.getPipelineAccess().getFullStopKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getPipelineAccess().getTuplePipelineParserRuleCall_1_0());
			}
			this_TuplePipeline_1=ruleTuplePipeline
			{
				$current = $this_TuplePipeline_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getPipelineAccess().getMapPipelineParserRuleCall_1_1());
			}
			this_MapPipeline_2=ruleMapPipeline
			{
				$current = $this_MapPipeline_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getPipelineAccess().getWindowPipelineParserRuleCall_1_2());
			}
			this_WindowPipeline_3=ruleWindowPipeline
			{
				$current = $this_WindowPipeline_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getPipelineAccess().getExternalParserRuleCall_1_3());
			}
			this_External_4=ruleExternal
			{
				$current = $this_External_4.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPipelineAccess().getNextPipelineParserRuleCall_2_0());
				}
				lv_next_5_0=rulePipeline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPipelineRule());
					}
					set(
						$current,
						"next",
						lv_next_5_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Pipeline");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleExternal
entryRuleExternal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalRule()); }
	iv_ruleExternal=ruleExternal
	{ $current=$iv_ruleExternal.current; }
	EOF;

// Rule External
ruleExternal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getExternalAccess().getFunctionFunctionCrossReference_0_0());
				}
			)
		)
		otherlv_1=LeftSquareBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalAccess().getInputExpressionParserRuleCall_2_0());
				}
				lv_input_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalRule());
					}
					add(
						$current,
						"input",
						lv_input_2_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Comma
			{
				newLeafNode(otherlv_3, grammarAccess.getExternalAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalAccess().getInputExpressionParserRuleCall_3_1_0());
					}
					lv_input_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalRule());
						}
						add(
							$current,
							"input",
							lv_input_4_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=RightSquareBracket
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTuplePipeline
entryRuleTuplePipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTuplePipelineRule()); }
	iv_ruleTuplePipeline=ruleTuplePipeline
	{ $current=$iv_ruleTuplePipeline.current; }
	EOF;

// Rule TuplePipeline
ruleTuplePipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getTuplePipelineAccess().getFilterAction_0_0_0(),
							$current);
					}
				)
				otherlv_1=Filter
				{
					newLeafNode(otherlv_1, grammarAccess.getTuplePipelineAccess().getFilterKeyword_0_0_1());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getTuplePipelineAccess().getAbsAction_0_1_0(),
							$current);
					}
				)
				otherlv_3=Abs
				{
					newLeafNode(otherlv_3, grammarAccess.getTuplePipelineAccess().getAbsKeyword_0_1_1());
				}
			)
		)
		otherlv_4=LeftSquareBracket
		{
			newLeafNode(otherlv_4, grammarAccess.getTuplePipelineAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTuplePipelineAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTuplePipelineRule());
					}
					set(
						$current,
						"expression",
						lv_expression_5_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=RightSquareBracket
		{
			newLeafNode(otherlv_6, grammarAccess.getTuplePipelineAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMapPipeline
entryRuleMapPipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapPipelineRule()); }
	iv_ruleMapPipeline=ruleMapPipeline
	{ $current=$iv_ruleMapPipeline.current; }
	EOF;

// Rule MapPipeline
ruleMapPipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMapPipelineAccess().getMapAction_0(),
					$current);
			}
		)
		otherlv_1=Map
		{
			newLeafNode(otherlv_1, grammarAccess.getMapPipelineAccess().getMapKeyword_1());
		}
		otherlv_2=LeftSquareBracket
		{
			newLeafNode(otherlv_2, grammarAccess.getMapPipelineAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapPipelineAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapPipelineRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=HyphenMinusGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getMapPipelineAccess().getHyphenMinusGreaterThanSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapPipelineAccess().getOutputVariableParserRuleCall_5_0());
				}
				lv_output_5_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapPipelineRule());
					}
					set(
						$current,
						"output",
						lv_output_5_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=RightSquareBracket
		{
			newLeafNode(otherlv_6, grammarAccess.getMapPipelineAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleWindowPipeline
entryRuleWindowPipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWindowPipelineRule()); }
	iv_ruleWindowPipeline=ruleWindowPipeline
	{ $current=$iv_ruleWindowPipeline.current; }
	EOF;

// Rule WindowPipeline
ruleWindowPipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWindowPipelineAccess().getWindowAction_0(),
					$current);
			}
		)
		otherlv_1=ByWindow
		{
			newLeafNode(otherlv_1, grammarAccess.getWindowPipelineAccess().getByWindowKeyword_1());
		}
		otherlv_2=LeftSquareBracket
		{
			newLeafNode(otherlv_2, grammarAccess.getWindowPipelineAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				lv_width_3_0=RULE_INT
				{
					newLeafNode(lv_width_3_0, grammarAccess.getWindowPipelineAccess().getWidthINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWindowPipelineRule());
					}
					setWithLastConsumed(
						$current,
						"width",
						lv_width_3_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.INT");
				}
			)
		)
		otherlv_4=RightSquareBracket
		{
			newLeafNode(otherlv_4, grammarAccess.getWindowPipelineAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_5=FullStop
		{
			newLeafNode(otherlv_5, grammarAccess.getWindowPipelineAccess().getFullStopKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWindowPipelineAccess().getExecuteExecutePipelineParserRuleCall_6_0());
				}
				lv_execute_6_0=ruleExecutePipeline
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWindowPipelineRule());
					}
					set(
						$current,
						"execute",
						lv_execute_6_0,
						"org.xtext.mdsd.arduino.boardgenerator.IoT.ExecutePipeline");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExecutePipeline
entryRuleExecutePipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecutePipelineRule()); }
	iv_ruleExecutePipeline=ruleExecutePipeline
	{ $current=$iv_ruleExecutePipeline.current; }
	EOF;

// Rule ExecutePipeline
ruleExecutePipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getReduceAction_0_0(),
						$current);
				}
			)
			otherlv_1=Reduce
			{
				newLeafNode(otherlv_1, grammarAccess.getExecutePipelineAccess().getReduceKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getMeanAction_1_0(),
						$current);
				}
			)
			otherlv_3=Mean
			{
				newLeafNode(otherlv_3, grammarAccess.getExecutePipelineAccess().getMeanKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getMedianAction_2_0(),
						$current);
				}
			)
			otherlv_5=Median
			{
				newLeafNode(otherlv_5, grammarAccess.getExecutePipelineAccess().getMedianKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getStDevAction_3_0(),
						$current);
				}
			)
			otherlv_7=Stdev
			{
				newLeafNode(otherlv_7, grammarAccess.getExecutePipelineAccess().getStdevKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getMinAction_4_0(),
						$current);
				}
			)
			otherlv_9=Min
			{
				newLeafNode(otherlv_9, grammarAccess.getExecutePipelineAccess().getMinKeyword_4_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getMaxAction_5_0(),
						$current);
				}
			)
			otherlv_11=Max
			{
				newLeafNode(otherlv_11, grammarAccess.getExecutePipelineAccess().getMaxKeyword_5_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getCountAction_6_0(),
						$current);
				}
			)
			otherlv_13=Count
			{
				newLeafNode(otherlv_13, grammarAccess.getExecutePipelineAccess().getCountKeyword_6_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExecutePipelineAccess().getVarAction_7_0(),
						$current);
				}
			)
			otherlv_15=Var
			{
				newLeafNode(otherlv_15, grammarAccess.getExecutePipelineAccess().getVarKeyword_7_1());
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getConditionalParserRuleCall());
	}
	this_Conditional_0=ruleConditional
	{
		$current = $this_Conditional_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	iv_ruleConditional=ruleConditional
	{ $current=$iv_ruleConditional.current; }
	EOF;

// Rule Conditional
ruleConditional returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConditionalAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getConditionalAccess().getConditionalConditionAction_1_0(),
						$current);
				}
			)
			otherlv_2=QuestionMark
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionalAccess().getQuestionMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalAccess().getCorrectConditionalParserRuleCall_1_2_0());
					}
					lv_correct_3_0=ruleConditional
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalRule());
						}
						set(
							$current,
							"correct",
							lv_correct_3_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Conditional");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=Colon
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionalAccess().getColonKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionalAccess().getIncorrectConditionalParserRuleCall_1_4_0());
					}
					lv_incorrect_5_0=ruleConditional
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalRule());
						}
						set(
							$current,
							"incorrect",
							lv_incorrect_5_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Conditional");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=VerticalLineVerticalLine
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2=AmpersandAmpersand
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=EqualsSignEqualsSign
				{
					newLeafNode(otherlv_2, grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleComparison
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEqualityRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.Comparison");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getEqualityAccess().getUnequalLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=ExclamationMarkEqualsSign
				{
					newLeafNode(otherlv_5, grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleComparison
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEqualityRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.Comparison");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getSubAddParserRuleCall_0());
		}
		this_SubAdd_0=ruleSubAdd
		{
			$current = $this_SubAdd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=LessThanSign
				{
					newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleSubAdd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparisonRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.SubAdd");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getLessThanEqualLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=LessThanSignEqualsSign
				{
					newLeafNode(otherlv_5, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleSubAdd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparisonRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.SubAdd");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_2_0(),
							$current);
					}
				)
				otherlv_8=GreaterThanSign
				{
					newLeafNode(otherlv_8, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_2_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_2_2_0());
						}
						lv_right_9_0=ruleSubAdd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparisonRule());
							}
							set(
								$current,
								"right",
								lv_right_9_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.SubAdd");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getGreaterThanEqualLeftAction_1_3_0(),
							$current);
					}
				)
				otherlv_11=GreaterThanSignEqualsSign
				{
					newLeafNode(otherlv_11, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_3_2_0());
						}
						lv_right_12_0=ruleSubAdd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparisonRule());
							}
							set(
								$current,
								"right",
								lv_right_12_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.SubAdd");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleSubAdd
entryRuleSubAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubAddRule()); }
	iv_ruleSubAdd=ruleSubAdd
	{ $current=$iv_ruleSubAdd.current; }
	EOF;

// Rule SubAdd
ruleSubAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubAddAccess().getMulDivParserRuleCall_0());
		}
		this_MulDiv_0=ruleMulDiv
		{
			$current = $this_MulDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSubAddAccess().getPlusLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=PlusSign
				{
					newLeafNode(otherlv_2, grammarAccess.getSubAddAccess().getPlusSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSubAddAccess().getRightMulDivParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleMulDiv
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSubAddRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.MulDiv");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSubAddAccess().getMinusLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=HyphenMinus
				{
					newLeafNode(otherlv_5, grammarAccess.getSubAddAccess().getHyphenMinusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSubAddAccess().getRightMulDivParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleMulDiv
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSubAddRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.MulDiv");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleMulDiv
entryRuleMulDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulDivRule()); }
	iv_ruleMulDiv=ruleMulDiv
	{ $current=$iv_ruleMulDiv.current; }
	EOF;

// Rule MulDiv
ruleMulDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulDivAccess().getNegationParserRuleCall_0());
		}
		this_Negation_0=ruleNegation
		{
			$current = $this_Negation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMulDivAccess().getMulLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=Asterisk
				{
					newLeafNode(otherlv_2, grammarAccess.getMulDivAccess().getAsteriskKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMulDivAccess().getRightNegationParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleNegation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMulDivRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.Negation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMulDivAccess().getDivLeftAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=Solidus
				{
					newLeafNode(otherlv_5, grammarAccess.getMulDivAccess().getSolidusKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMulDivAccess().getRightNegationParserRuleCall_1_1_2_0());
						}
						lv_right_6_0=ruleNegation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMulDivRule());
							}
							set(
								$current,
								"right",
								lv_right_6_0,
								"org.xtext.mdsd.arduino.boardgenerator.IoT.Negation");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	iv_ruleNegation=ruleNegation
	{ $current=$iv_ruleNegation.current; }
	EOF;

// Rule Negation
ruleNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNegationAccess().getNegationAction_0_0(),
						$current);
				}
			)
			otherlv_1=HyphenMinus
			{
				newLeafNode(otherlv_1, grammarAccess.getNegationAccess().getHyphenMinusKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNegationAccess().getValueExponentParserRuleCall_0_2_0());
					}
					lv_value_2_0=ruleExponent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegationRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Exponent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getNegationAccess().getExponentParserRuleCall_1());
		}
		this_Exponent_3=ruleExponent
		{
			$current = $this_Exponent_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExponent
entryRuleExponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	iv_ruleExponent=ruleExponent
	{ $current=$iv_ruleExponent.current; }
	EOF;

// Rule Exponent
ruleExponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentAccess().getNotParserRuleCall_0());
		}
		this_Not_0=ruleNot
		{
			$current = $this_Not_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExponentAccess().getExponentBaseAction_1_0(),
						$current);
				}
			)
			otherlv_2=AsteriskAsterisk
			{
				newLeafNode(otherlv_2, grammarAccess.getExponentAccess().getAsteriskAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentAccess().getPowerNegationParserRuleCall_1_2_0());
					}
					lv_power_3_0=ruleNegation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentRule());
						}
						set(
							$current,
							"power",
							lv_power_3_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Negation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNotAccess().getNotAction_0_0(),
						$current);
				}
			)
			otherlv_1=ExclamationMark
			{
				newLeafNode(otherlv_1, grammarAccess.getNotAccess().getExclamationMarkKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNotAccess().getValuePrimaryParserRuleCall_0_2_0());
					}
					lv_value_2_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNotRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.xtext.mdsd.arduino.boardgenerator.IoT.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getNotAccess().getPrimaryParserRuleCall_1());
		}
		this_Primary_3=rulePrimary
		{
			$current = $this_Primary_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftParenthesis
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=RightParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getReferenceParserRuleCall_1());
		}
		this_Reference_3=ruleReference
		{
			$current = $this_Reference_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_2());
		}
		this_NumberLiteral_4=ruleNumberLiteral
		{
			$current = $this_NumberLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getBooleanLiteralParserRuleCall_3());
		}
		this_BooleanLiteral_5=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_4());
		}
		this_StringLiteral_6=ruleStringLiteral
		{
			$current = $this_StringLiteral_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_ref_0_0=RULE_ID
			{
				newLeafNode(lv_ref_0_0, grammarAccess.getReferenceAccess().getRefIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getReferenceRule());
				}
				setWithLastConsumed(
					$current,
					"ref",
					lv_ref_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_str_0_0=RULE_STRING
			{
				newLeafNode(lv_str_0_0, grammarAccess.getStringLiteralAccess().getStrSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"str",
					lv_str_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current; }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberLiteralAccess().getNumbNUMBERParserRuleCall_0());
			}
			lv_numb_0_0=ruleNUMBER
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
				}
				set(
					$current,
					"numb",
					lv_numb_0_0,
					"org.xtext.mdsd.arduino.boardgenerator.IoT.NUMBER");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_bool_0_0=RULE_BOOLEAN
			{
				newLeafNode(lv_bool_0_0, grammarAccess.getBooleanLiteralAccess().getBoolBOOLEANTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBooleanLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"bool",
					lv_bool_0_0,
					"org.xtext.mdsd.arduino.boardgenerator.IoT.BOOLEAN");
			}
		)
	)
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_DBL_1=RULE_DBL
		{
			$current.merge(this_DBL_1);
		}
		{
			newLeafNode(this_DBL_1, grammarAccess.getNUMBERAccess().getDBLTerminalRuleCall_1());
		}
		    |
		this_NINT_2=RULE_NINT
		{
			$current.merge(this_NINT_2);
		}
		{
			newLeafNode(this_NINT_2, grammarAccess.getNUMBERAccess().getNINTTerminalRuleCall_2());
		}
		    |
		this_NDBL_3=RULE_NDBL
		{
			$current.merge(this_NDBL_3);
		}
		{
			newLeafNode(this_NDBL_3, grammarAccess.getNUMBERAccess().getNDBLTerminalRuleCall_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}
