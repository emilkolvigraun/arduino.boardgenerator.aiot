/**
 * generated by Xtext 2.21.0
 */
package org.xtext.mdsd.arduino.boardgenerator.ioT.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.mdsd.arduino.boardgenerator.ioT.IoTPackage;
import org.xtext.mdsd.arduino.boardgenerator.ioT.MqttClient;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mqtt Client</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getBroker <em>Broker</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getClient <em>Client</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getSub <em>Sub</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MqttClientImpl extends ChannelConfigImpl implements MqttClient
{
  /**
   * The default value of the '{@link #getBroker() <em>Broker</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroker()
   * @generated
   * @ordered
   */
  protected static final String BROKER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBroker() <em>Broker</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroker()
   * @generated
   * @ordered
   */
  protected String broker = BROKER_EDEFAULT;

  /**
   * The default value of the '{@link #getClient() <em>Client</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClient()
   * @generated
   * @ordered
   */
  protected static final String CLIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClient() <em>Client</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClient()
   * @generated
   * @ordered
   */
  protected String client = CLIENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSub() <em>Sub</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSub()
   * @generated
   * @ordered
   */
  protected EList<String> sub;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MqttClientImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IoTPackage.Literals.MQTT_CLIENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBroker()
  {
    return broker;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroker(String newBroker)
  {
    String oldBroker = broker;
    broker = newBroker;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.MQTT_CLIENT__BROKER, oldBroker, broker));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getClient()
  {
    return client;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClient(String newClient)
  {
    String oldClient = client;
    client = newClient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.MQTT_CLIENT__CLIENT, oldClient, client));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getSub()
  {
    if (sub == null)
    {
      sub = new EDataTypeEList<String>(String.class, this, IoTPackage.MQTT_CLIENT__SUB);
    }
    return sub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        return getBroker();
      case IoTPackage.MQTT_CLIENT__CLIENT:
        return getClient();
      case IoTPackage.MQTT_CLIENT__SUB:
        return getSub();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        setBroker((String)newValue);
        return;
      case IoTPackage.MQTT_CLIENT__CLIENT:
        setClient((String)newValue);
        return;
      case IoTPackage.MQTT_CLIENT__SUB:
        getSub().clear();
        getSub().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        setBroker(BROKER_EDEFAULT);
        return;
      case IoTPackage.MQTT_CLIENT__CLIENT:
        setClient(CLIENT_EDEFAULT);
        return;
      case IoTPackage.MQTT_CLIENT__SUB:
        getSub().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        return BROKER_EDEFAULT == null ? broker != null : !BROKER_EDEFAULT.equals(broker);
      case IoTPackage.MQTT_CLIENT__CLIENT:
        return CLIENT_EDEFAULT == null ? client != null : !CLIENT_EDEFAULT.equals(client);
      case IoTPackage.MQTT_CLIENT__SUB:
        return sub != null && !sub.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (broker: ");
    result.append(broker);
    result.append(", client: ");
    result.append(client);
    result.append(", sub: ");
    result.append(sub);
    result.append(')');
    return result.toString();
  }

} //MqttClientImpl
