/**
 * generated by Xtext 2.21.0
 */
package org.xtext.mdsd.arduino.boardgenerator.ioT.impl;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.mdsd.arduino.boardgenerator.ioT.IoTPackage;
import org.xtext.mdsd.arduino.boardgenerator.ioT.MqttClient;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mqtt Client</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getBroker <em>Broker</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getPort <em>Port</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getClient <em>Client</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.MqttClientImpl#getPub <em>Pub</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MqttClientImpl extends ChannelConfigImpl implements MqttClient
{
  /**
   * The default value of the '{@link #getBroker() <em>Broker</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroker()
   * @generated
   * @ordered
   */
  protected static final String BROKER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBroker() <em>Broker</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroker()
   * @generated
   * @ordered
   */
  protected String broker = BROKER_EDEFAULT;

  /**
   * The default value of the '{@link #getPort() <em>Port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected static final int PORT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPort() <em>Port</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPort()
   * @generated
   * @ordered
   */
  protected int port = PORT_EDEFAULT;

  /**
   * The default value of the '{@link #getClient() <em>Client</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClient()
   * @generated
   * @ordered
   */
  protected static final String CLIENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClient() <em>Client</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClient()
   * @generated
   * @ordered
   */
  protected String client = CLIENT_EDEFAULT;

  /**
   * The default value of the '{@link #getPub() <em>Pub</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPub()
   * @generated
   * @ordered
   */
  protected static final String PUB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPub() <em>Pub</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPub()
   * @generated
   * @ordered
   */
  protected String pub = PUB_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MqttClientImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IoTPackage.Literals.MQTT_CLIENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBroker()
  {
    return broker;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroker(String newBroker)
  {
    String oldBroker = broker;
    broker = newBroker;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.MQTT_CLIENT__BROKER, oldBroker, broker));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPort()
  {
    return port;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPort(int newPort)
  {
    int oldPort = port;
    port = newPort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.MQTT_CLIENT__PORT, oldPort, port));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getClient()
  {
    return client;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClient(String newClient)
  {
    String oldClient = client;
    client = newClient;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.MQTT_CLIENT__CLIENT, oldClient, client));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPub()
  {
    return pub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPub(String newPub)
  {
    String oldPub = pub;
    pub = newPub;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.MQTT_CLIENT__PUB, oldPub, pub));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        return getBroker();
      case IoTPackage.MQTT_CLIENT__PORT:
        return getPort();
      case IoTPackage.MQTT_CLIENT__CLIENT:
        return getClient();
      case IoTPackage.MQTT_CLIENT__PUB:
        return getPub();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        setBroker((String)newValue);
        return;
      case IoTPackage.MQTT_CLIENT__PORT:
        setPort((Integer)newValue);
        return;
      case IoTPackage.MQTT_CLIENT__CLIENT:
        setClient((String)newValue);
        return;
      case IoTPackage.MQTT_CLIENT__PUB:
        setPub((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        setBroker(BROKER_EDEFAULT);
        return;
      case IoTPackage.MQTT_CLIENT__PORT:
        setPort(PORT_EDEFAULT);
        return;
      case IoTPackage.MQTT_CLIENT__CLIENT:
        setClient(CLIENT_EDEFAULT);
        return;
      case IoTPackage.MQTT_CLIENT__PUB:
        setPub(PUB_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.MQTT_CLIENT__BROKER:
        return BROKER_EDEFAULT == null ? broker != null : !BROKER_EDEFAULT.equals(broker);
      case IoTPackage.MQTT_CLIENT__PORT:
        return port != PORT_EDEFAULT;
      case IoTPackage.MQTT_CLIENT__CLIENT:
        return CLIENT_EDEFAULT == null ? client != null : !CLIENT_EDEFAULT.equals(client);
      case IoTPackage.MQTT_CLIENT__PUB:
        return PUB_EDEFAULT == null ? pub != null : !PUB_EDEFAULT.equals(pub);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (broker: ");
    result.append(broker);
    result.append(", port: ");
    result.append(port);
    result.append(", client: ");
    result.append(client);
    result.append(", pub: ");
    result.append(pub);
    result.append(')');
    return result.toString();
  }

} //MqttClientImpl
