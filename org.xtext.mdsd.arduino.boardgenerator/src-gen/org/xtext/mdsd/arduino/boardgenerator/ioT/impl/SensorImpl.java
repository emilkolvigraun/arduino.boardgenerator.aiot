/**
 * generated by Xtext 2.21.0
 */
package org.xtext.mdsd.arduino.boardgenerator.ioT.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.mdsd.arduino.boardgenerator.ioT.IoTPackage;
import org.xtext.mdsd.arduino.boardgenerator.ioT.Sampler;
import org.xtext.mdsd.arduino.boardgenerator.ioT.Sensor;
import org.xtext.mdsd.arduino.boardgenerator.ioT.SensorOutput;
import org.xtext.mdsd.arduino.boardgenerator.ioT.SensorType;
import org.xtext.mdsd.arduino.boardgenerator.ioT.SensorVariables;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.SensorImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.SensorImpl#getSensortype <em>Sensortype</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.SensorImpl#getVars <em>Vars</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.SensorImpl#getSampler <em>Sampler</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.SensorImpl#getVcc <em>Vcc</em>}</li>
 *   <li>{@link org.xtext.mdsd.arduino.boardgenerator.ioT.impl.SensorImpl#getOutput <em>Output</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorImpl extends MinimalEObjectImpl.Container implements Sensor
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSensortype() <em>Sensortype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensortype()
   * @generated
   * @ordered
   */
  protected SensorType sensortype;

  /**
   * The cached value of the '{@link #getVars() <em>Vars</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVars()
   * @generated
   * @ordered
   */
  protected SensorVariables vars;

  /**
   * The cached value of the '{@link #getSampler() <em>Sampler</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSampler()
   * @generated
   * @ordered
   */
  protected EList<Sampler> sampler;

  /**
   * The default value of the '{@link #getVcc() <em>Vcc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVcc()
   * @generated
   * @ordered
   */
  protected static final int VCC_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getVcc() <em>Vcc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVcc()
   * @generated
   * @ordered
   */
  protected int vcc = VCC_EDEFAULT;

  /**
   * The cached value of the '{@link #getOutput() <em>Output</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutput()
   * @generated
   * @ordered
   */
  protected EList<SensorOutput> output;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IoTPackage.Literals.SENSOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SENSOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensorType getSensortype()
  {
    return sensortype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSensortype(SensorType newSensortype, NotificationChain msgs)
  {
    SensorType oldSensortype = sensortype;
    sensortype = newSensortype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IoTPackage.SENSOR__SENSORTYPE, oldSensortype, newSensortype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSensortype(SensorType newSensortype)
  {
    if (newSensortype != sensortype)
    {
      NotificationChain msgs = null;
      if (sensortype != null)
        msgs = ((InternalEObject)sensortype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SENSOR__SENSORTYPE, null, msgs);
      if (newSensortype != null)
        msgs = ((InternalEObject)newSensortype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SENSOR__SENSORTYPE, null, msgs);
      msgs = basicSetSensortype(newSensortype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SENSOR__SENSORTYPE, newSensortype, newSensortype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SensorVariables getVars()
  {
    return vars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVars(SensorVariables newVars, NotificationChain msgs)
  {
    SensorVariables oldVars = vars;
    vars = newVars;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IoTPackage.SENSOR__VARS, oldVars, newVars);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVars(SensorVariables newVars)
  {
    if (newVars != vars)
    {
      NotificationChain msgs = null;
      if (vars != null)
        msgs = ((InternalEObject)vars).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SENSOR__VARS, null, msgs);
      if (newVars != null)
        msgs = ((InternalEObject)newVars).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IoTPackage.SENSOR__VARS, null, msgs);
      msgs = basicSetVars(newVars, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SENSOR__VARS, newVars, newVars));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Sampler> getSampler()
  {
    if (sampler == null)
    {
      sampler = new EObjectContainmentEList<Sampler>(Sampler.class, this, IoTPackage.SENSOR__SAMPLER);
    }
    return sampler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getVcc()
  {
    return vcc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVcc(int newVcc)
  {
    int oldVcc = vcc;
    vcc = newVcc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IoTPackage.SENSOR__VCC, oldVcc, vcc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SensorOutput> getOutput()
  {
    if (output == null)
    {
      output = new EObjectContainmentEList<SensorOutput>(SensorOutput.class, this, IoTPackage.SENSOR__OUTPUT);
    }
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IoTPackage.SENSOR__SENSORTYPE:
        return basicSetSensortype(null, msgs);
      case IoTPackage.SENSOR__VARS:
        return basicSetVars(null, msgs);
      case IoTPackage.SENSOR__SAMPLER:
        return ((InternalEList<?>)getSampler()).basicRemove(otherEnd, msgs);
      case IoTPackage.SENSOR__OUTPUT:
        return ((InternalEList<?>)getOutput()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IoTPackage.SENSOR__NAME:
        return getName();
      case IoTPackage.SENSOR__SENSORTYPE:
        return getSensortype();
      case IoTPackage.SENSOR__VARS:
        return getVars();
      case IoTPackage.SENSOR__SAMPLER:
        return getSampler();
      case IoTPackage.SENSOR__VCC:
        return getVcc();
      case IoTPackage.SENSOR__OUTPUT:
        return getOutput();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IoTPackage.SENSOR__NAME:
        setName((String)newValue);
        return;
      case IoTPackage.SENSOR__SENSORTYPE:
        setSensortype((SensorType)newValue);
        return;
      case IoTPackage.SENSOR__VARS:
        setVars((SensorVariables)newValue);
        return;
      case IoTPackage.SENSOR__SAMPLER:
        getSampler().clear();
        getSampler().addAll((Collection<? extends Sampler>)newValue);
        return;
      case IoTPackage.SENSOR__VCC:
        setVcc((Integer)newValue);
        return;
      case IoTPackage.SENSOR__OUTPUT:
        getOutput().clear();
        getOutput().addAll((Collection<? extends SensorOutput>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.SENSOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case IoTPackage.SENSOR__SENSORTYPE:
        setSensortype((SensorType)null);
        return;
      case IoTPackage.SENSOR__VARS:
        setVars((SensorVariables)null);
        return;
      case IoTPackage.SENSOR__SAMPLER:
        getSampler().clear();
        return;
      case IoTPackage.SENSOR__VCC:
        setVcc(VCC_EDEFAULT);
        return;
      case IoTPackage.SENSOR__OUTPUT:
        getOutput().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IoTPackage.SENSOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case IoTPackage.SENSOR__SENSORTYPE:
        return sensortype != null;
      case IoTPackage.SENSOR__VARS:
        return vars != null;
      case IoTPackage.SENSOR__SAMPLER:
        return sampler != null && !sampler.isEmpty();
      case IoTPackage.SENSOR__VCC:
        return vcc != VCC_EDEFAULT;
      case IoTPackage.SENSOR__OUTPUT:
        return output != null && !output.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", vcc: ");
    result.append(vcc);
    result.append(')');
    return result.toString();
  }

} //SensorImpl
