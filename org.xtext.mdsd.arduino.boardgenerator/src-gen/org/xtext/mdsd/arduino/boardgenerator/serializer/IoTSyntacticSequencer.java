/*
 * generated by Xtext 2.21.0
 */
package org.xtext.mdsd.arduino.boardgenerator.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.mdsd.arduino.boardgenerator.services.IoTGrammarAccess;

@SuppressWarnings("all")
public class IoTSyntacticSequencer extends AbstractSyntacticSequencer {

	protected IoTGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ExtendsBoard___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_4__q;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (IoTGrammarAccess) access;
		match_ExtendsBoard___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getExtendsBoardAccess().getColonKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getExtendsBoardAccess().getBEGINTerminalRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getExtendsBoardAccess().getENDTerminalRuleCall_3_4()));
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ExtendsBoard___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_4__q.equals(syntax))
				emit_ExtendsBoard___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (':' BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     abstractBoard=[AbstractBoard|ID] (ambiguity) (rule end)
	 */
	protected void emit_ExtendsBoard___ColonKeyword_3_0_BEGINTerminalRuleCall_3_1_ENDTerminalRuleCall_3_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' value=Primary
	 *     (rule start) (ambiguity) '-' value=Exponent
	 *     (rule start) (ambiguity) bool=BOOLEAN
	 *     (rule start) (ambiguity) numb=NUMBER
	 *     (rule start) (ambiguity) ref=ID
	 *     (rule start) (ambiguity) str=STRING
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Conditional.condition=}
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Equal.left=}
	 *     (rule start) (ambiguity) {Exponent.base=}
	 *     (rule start) (ambiguity) {GreaterThan.left=}
	 *     (rule start) (ambiguity) {GreaterThanEqual.left=}
	 *     (rule start) (ambiguity) {LessThan.left=}
	 *     (rule start) (ambiguity) {LessThanEqual.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Mul.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Unequal.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' value=Primary
	 *     (rule start) (ambiguity) '-' value=Exponent
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Conditional.condition=}
	 *     (rule start) (ambiguity) {Div.left=}
	 *     (rule start) (ambiguity) {Equal.left=}
	 *     (rule start) (ambiguity) {Exponent.base=}
	 *     (rule start) (ambiguity) {GreaterThan.left=}
	 *     (rule start) (ambiguity) {GreaterThanEqual.left=}
	 *     (rule start) (ambiguity) {LessThan.left=}
	 *     (rule start) (ambiguity) {LessThanEqual.left=}
	 *     (rule start) (ambiguity) {Minus.left=}
	 *     (rule start) (ambiguity) {Mul.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {Plus.left=}
	 *     (rule start) (ambiguity) {Unequal.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
