/*
 * generated by Xtext 2.21.0
 */
parser grammar InternalIoTParser;

options {
	tokenVocab=InternalIoTLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.xtext.mdsd.arduino.boardgenerator.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.mdsd.arduino.boardgenerator.services.IoTGrammarAccess;

}
@members {
	private IoTGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("QuestionMark", "'?'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("ExclamationMarkEqualsSign", "'!='");
		tokenNameToValue.put("AmpersandAmpersand", "'&&'");
		tokenNameToValue.put("AsteriskAsterisk", "'**'");
		tokenNameToValue.put("HyphenMinusGreaterThanSign", "'->'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("As", "'as'");
		tokenNameToValue.put("Id", "'id'");
		tokenNameToValue.put("Ip", "'ip'");
		tokenNameToValue.put("VerticalLineVerticalLine", "'||'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Map", "'map'");
		tokenNameToValue.put("Max", "'max'");
		tokenNameToValue.put("Min", "'min'");
		tokenNameToValue.put("Vcc", "'vcc'");
		tokenNameToValue.put("Baud", "'baud'");
		tokenNameToValue.put("Byte", "'byte'");
		tokenNameToValue.put("Char", "'char'");
		tokenNameToValue.put("Mean", "'mean'");
		tokenNameToValue.put("Pass", "'pass'");
		tokenNameToValue.put("Pipe", "'pipe'");
		tokenNameToValue.put("Port", "'port'");
		tokenNameToValue.put("Ssid", "'ssid'");
		tokenNameToValue.put("Stop", "'stop'");
		tokenNameToValue.put("Type", "'type'");
		tokenNameToValue.put("Wifi", "'wifi'");
		tokenNameToValue.put("Board", "'board'");
		tokenNameToValue.put("Model", "'model'");
		tokenNameToValue.put("Route", "'route'");
		tokenNameToValue.put("Topic", "'topic'");
		tokenNameToValue.put("Broker", "'broker'");
		tokenNameToValue.put("Median", "'median'");
		tokenNameToValue.put("Sample", "'sample'");
		tokenNameToValue.put("Sensor", "'sensor'");
		tokenNameToValue.put("Channel", "'channel'");
		tokenNameToValue.put("Command", "'command'");
		tokenNameToValue.put("Extends", "'extends'");
		tokenNameToValue.put("Include", "'include'");
		tokenNameToValue.put("Seconds", "'seconds'");
		tokenNameToValue.put("Abstract", "'abstract'");
		tokenNameToValue.put("ByWindow", "'byWindow'");
		tokenNameToValue.put("Function", "'function'");
		tokenNameToValue.put("Frequency", "'frequency'");
		tokenNameToValue.put("Microseconds", "'microseconds'");
		tokenNameToValue.put("Milliseconds", "'milliseconds'");
	}

	public void setGrammarAccess(IoTGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInclude
entryRuleInclude
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncludeAccess().getGroup()); }
		(rule__Include__Group__0)
		{ after(grammarAccess.getIncludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWifiConfig
entryRuleWifiConfig
:
{ before(grammarAccess.getWifiConfigRule()); }
	 ruleWifiConfig
{ after(grammarAccess.getWifiConfigRule()); } 
	 EOF 
;

// Rule WifiConfig
ruleWifiConfig 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWifiConfigAccess().getGroup()); }
		(rule__WifiConfig__Group__0)
		{ after(grammarAccess.getWifiConfigAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChannel
entryRuleChannel
:
{ before(grammarAccess.getChannelRule()); }
	 ruleChannel
{ after(grammarAccess.getChannelRule()); } 
	 EOF 
;

// Rule Channel
ruleChannel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChannelAccess().getGroup()); }
		(rule__Channel__Group__0)
		{ after(grammarAccess.getChannelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChannelType
entryRuleChannelType
:
{ before(grammarAccess.getChannelTypeRule()); }
	 ruleChannelType
{ after(grammarAccess.getChannelTypeRule()); } 
	 EOF 
;

// Rule ChannelType
ruleChannelType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChannelTypeAccess().getNameAssignment()); }
		(rule__ChannelType__NameAssignment)
		{ after(grammarAccess.getChannelTypeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChannelConfig
entryRuleChannelConfig
:
{ before(grammarAccess.getChannelConfigRule()); }
	 ruleChannelConfig
{ after(grammarAccess.getChannelConfigRule()); } 
	 EOF 
;

// Rule ChannelConfig
ruleChannelConfig 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChannelConfigAccess().getAlternatives()); }
		(rule__ChannelConfig__Alternatives)
		{ after(grammarAccess.getChannelConfigAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWifi
entryRuleWifi
:
{ before(grammarAccess.getWifiRule()); }
	 ruleWifi
{ after(grammarAccess.getWifiRule()); } 
	 EOF 
;

// Rule Wifi
ruleWifi 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWifiAccess().getGroup()); }
		(rule__Wifi__Group__0)
		{ after(grammarAccess.getWifiAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSerial
entryRuleSerial
:
{ before(grammarAccess.getSerialRule()); }
	 ruleSerial
{ after(grammarAccess.getSerialRule()); } 
	 EOF 
;

// Rule Serial
ruleSerial 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSerialAccess().getGroup()); }
		(rule__Serial__Group__0)
		{ after(grammarAccess.getSerialAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStopIdentifyer
entryRuleStopIdentifyer
:
{ before(grammarAccess.getStopIdentifyerRule()); }
	 ruleStopIdentifyer
{ after(grammarAccess.getStopIdentifyerRule()); } 
	 EOF 
;

// Rule StopIdentifyer
ruleStopIdentifyer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopIdentifyerAccess().getAlternatives()); }
		(rule__StopIdentifyer__Alternatives)
		{ after(grammarAccess.getStopIdentifyerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStopChar
entryRuleStopChar
:
{ before(grammarAccess.getStopCharRule()); }
	 ruleStopChar
{ after(grammarAccess.getStopCharRule()); } 
	 EOF 
;

// Rule StopChar
ruleStopChar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopCharAccess().getGroup()); }
		(rule__StopChar__Group__0)
		{ after(grammarAccess.getStopCharAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStopByte
entryRuleStopByte
:
{ before(grammarAccess.getStopByteRule()); }
	 ruleStopByte
{ after(grammarAccess.getStopByteRule()); } 
	 EOF 
;

// Rule StopByte
ruleStopByte 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopByteAccess().getGroup()); }
		(rule__StopByte__Group__0)
		{ after(grammarAccess.getStopByteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMqttClient
entryRuleMqttClient
:
{ before(grammarAccess.getMqttClientRule()); }
	 ruleMqttClient
{ after(grammarAccess.getMqttClientRule()); } 
	 EOF 
;

// Rule MqttClient
ruleMqttClient 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMqttClientAccess().getGroup()); }
		(rule__MqttClient__Group__0)
		{ after(grammarAccess.getMqttClientAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionInputType
entryRuleFunctionInputType
:
{ before(grammarAccess.getFunctionInputTypeRule()); }
	 ruleFunctionInputType
{ after(grammarAccess.getFunctionInputTypeRule()); } 
	 EOF 
;

// Rule FunctionInputType
ruleFunctionInputType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionInputTypeAccess().getNameAssignment()); }
		(rule__FunctionInputType__NameAssignment)
		{ after(grammarAccess.getFunctionInputTypeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoard
entryRuleBoard
:
{ before(grammarAccess.getBoardRule()); }
	 ruleBoard
{ after(grammarAccess.getBoardRule()); } 
	 EOF 
;

// Rule Board
ruleBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardAccess().getGroup()); }
		(rule__Board__Group__0)
		{ after(grammarAccess.getBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNewBoard
entryRuleNewBoard
:
{ before(grammarAccess.getNewBoardRule()); }
	 ruleNewBoard
{ after(grammarAccess.getNewBoardRule()); } 
	 EOF 
;

// Rule NewBoard
ruleNewBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNewBoardAccess().getGroup()); }
		(rule__NewBoard__Group__0)
		{ after(grammarAccess.getNewBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoardVersion
entryRuleBoardVersion
:
{ before(grammarAccess.getBoardVersionRule()); }
	 ruleBoardVersion
{ after(grammarAccess.getBoardVersionRule()); } 
	 EOF 
;

// Rule BoardVersion
ruleBoardVersion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardVersionAccess().getGroup()); }
		(rule__BoardVersion__Group__0)
		{ after(grammarAccess.getBoardVersionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtendsBoard
entryRuleExtendsBoard
:
{ before(grammarAccess.getExtendsBoardRule()); }
	 ruleExtendsBoard
{ after(grammarAccess.getExtendsBoardRule()); } 
	 EOF 
;

// Rule ExtendsBoard
ruleExtendsBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtendsBoardAccess().getGroup()); }
		(rule__ExtendsBoard__Group__0)
		{ after(grammarAccess.getExtendsBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractBoard
entryRuleAbstractBoard
:
{ before(grammarAccess.getAbstractBoardRule()); }
	 ruleAbstractBoard
{ after(grammarAccess.getAbstractBoardRule()); } 
	 EOF 
;

// Rule AbstractBoard
ruleAbstractBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractBoardAccess().getGroup()); }
		(rule__AbstractBoard__Group__0)
		{ after(grammarAccess.getAbstractBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorType
entryRuleSensorType
:
{ before(grammarAccess.getSensorTypeRule()); }
	 ruleSensorType
{ after(grammarAccess.getSensorTypeRule()); } 
	 EOF 
;

// Rule SensorType
ruleSensorType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorTypeAccess().getAlternatives()); }
		(rule__SensorType__Alternatives)
		{ after(grammarAccess.getSensorTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExternalSensor
entryRuleExternalSensor
:
{ before(grammarAccess.getExternalSensorRule()); }
	 ruleExternalSensor
{ after(grammarAccess.getExternalSensorRule()); } 
	 EOF 
;

// Rule ExternalSensor
ruleExternalSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExternalSensorAccess().getGroup()); }
		(rule__ExternalSensor__Group__0)
		{ after(grammarAccess.getExternalSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOnboardSensor
entryRuleOnboardSensor
:
{ before(grammarAccess.getOnboardSensorRule()); }
	 ruleOnboardSensor
{ after(grammarAccess.getOnboardSensorRule()); } 
	 EOF 
;

// Rule OnboardSensor
ruleOnboardSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOnboardSensorAccess().getNameAssignment()); }
		(rule__OnboardSensor__NameAssignment)
		{ after(grammarAccess.getOnboardSensorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorVariables
entryRuleSensorVariables
:
{ before(grammarAccess.getSensorVariablesRule()); }
	 ruleSensorVariables
{ after(grammarAccess.getSensorVariablesRule()); } 
	 EOF 
;

// Rule SensorVariables
ruleSensorVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorVariablesAccess().getGroup()); }
		(rule__SensorVariables__Group__0)
		{ after(grammarAccess.getSensorVariablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSampler
entryRuleSampler
:
{ before(grammarAccess.getSamplerRule()); }
	 ruleSampler
{ after(grammarAccess.getSamplerRule()); } 
	 EOF 
;

// Rule Sampler
ruleSampler 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSamplerAccess().getAlternatives()); }
		(rule__Sampler__Alternatives)
		{ after(grammarAccess.getSamplerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getGroup()); }
		(rule__Command__Group__0)
		{ after(grammarAccess.getCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFrequency
entryRuleFrequency
:
{ before(grammarAccess.getFrequencyRule()); }
	 ruleFrequency
{ after(grammarAccess.getFrequencyRule()); } 
	 EOF 
;

// Rule Frequency
ruleFrequency 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFrequencyAccess().getGroup()); }
		(rule__Frequency__Group__0)
		{ after(grammarAccess.getFrequencyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResolution
entryRuleResolution
:
{ before(grammarAccess.getResolutionRule()); }
	 ruleResolution
{ after(grammarAccess.getResolutionRule()); } 
	 EOF 
;

// Rule Resolution
ruleResolution 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResolutionAccess().getAlternatives()); }
		(rule__Resolution__Alternatives)
		{ after(grammarAccess.getResolutionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorOutput
entryRuleSensorOutput
:
{ before(grammarAccess.getSensorOutputRule()); }
	 ruleSensorOutput
{ after(grammarAccess.getSensorOutputRule()); } 
	 EOF 
;

// Rule SensorOutput
ruleSensorOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorOutputAccess().getGroup()); }
		(rule__SensorOutput__Group__0)
		{ after(grammarAccess.getSensorOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataOutput
entryRuleDataOutput
:
{ before(grammarAccess.getDataOutputRule()); }
	 ruleDataOutput
{ after(grammarAccess.getDataOutputRule()); } 
	 EOF 
;

// Rule DataOutput
ruleDataOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataOutputAccess().getGroup()); }
		(rule__DataOutput__Group__0)
		{ after(grammarAccess.getDataOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePipeline
entryRulePipeline
:
{ before(grammarAccess.getPipelineRule()); }
	 rulePipeline
{ after(grammarAccess.getPipelineRule()); } 
	 EOF 
;

// Rule Pipeline
rulePipeline 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPipelineAccess().getGroup()); }
		(rule__Pipeline__Group__0)
		{ after(grammarAccess.getPipelineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExternal
entryRuleExternal
:
{ before(grammarAccess.getExternalRule()); }
	 ruleExternal
{ after(grammarAccess.getExternalRule()); } 
	 EOF 
;

// Rule External
ruleExternal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExternalAccess().getGroup()); }
		(rule__External__Group__0)
		{ after(grammarAccess.getExternalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapPipeline
entryRuleMapPipeline
:
{ before(grammarAccess.getMapPipelineRule()); }
	 ruleMapPipeline
{ after(grammarAccess.getMapPipelineRule()); } 
	 EOF 
;

// Rule MapPipeline
ruleMapPipeline 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapPipelineAccess().getGroup()); }
		(rule__MapPipeline__Group__0)
		{ after(grammarAccess.getMapPipelineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWindowPipeline
entryRuleWindowPipeline
:
{ before(grammarAccess.getWindowPipelineRule()); }
	 ruleWindowPipeline
{ after(grammarAccess.getWindowPipelineRule()); } 
	 EOF 
;

// Rule WindowPipeline
ruleWindowPipeline 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWindowPipelineAccess().getGroup()); }
		(rule__WindowPipeline__Group__0)
		{ after(grammarAccess.getWindowPipelineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExecutePipeline
entryRuleExecutePipeline
:
{ before(grammarAccess.getExecutePipelineRule()); }
	 ruleExecutePipeline
{ after(grammarAccess.getExecutePipelineRule()); } 
	 EOF 
;

// Rule ExecutePipeline
ruleExecutePipeline 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExecutePipelineAccess().getAlternatives()); }
		(rule__ExecutePipeline__Alternatives)
		{ after(grammarAccess.getExecutePipelineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getConditionalParserRuleCall()); }
		ruleConditional
		{ after(grammarAccess.getExpressionAccess().getConditionalParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquality
entryRuleEquality
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup()); }
		(rule__Equality__Group__0)
		{ after(grammarAccess.getEqualityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubAdd
entryRuleSubAdd
:
{ before(grammarAccess.getSubAddRule()); }
	 ruleSubAdd
{ after(grammarAccess.getSubAddRule()); } 
	 EOF 
;

// Rule SubAdd
ruleSubAdd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubAddAccess().getGroup()); }
		(rule__SubAdd__Group__0)
		{ after(grammarAccess.getSubAddAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulDiv
entryRuleMulDiv
:
{ before(grammarAccess.getMulDivRule()); }
	 ruleMulDiv
{ after(grammarAccess.getMulDivRule()); } 
	 EOF 
;

// Rule MulDiv
ruleMulDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulDivAccess().getGroup()); }
		(rule__MulDiv__Group__0)
		{ after(grammarAccess.getMulDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegation
entryRuleNegation
:
{ before(grammarAccess.getNegationRule()); }
	 ruleNegation
{ after(grammarAccess.getNegationRule()); } 
	 EOF 
;

// Rule Negation
ruleNegation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationAccess().getAlternatives()); }
		(rule__Negation__Alternatives)
		{ after(grammarAccess.getNegationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExponent
entryRuleExponent
:
{ before(grammarAccess.getExponentRule()); }
	 ruleExponent
{ after(grammarAccess.getExponentRule()); } 
	 EOF 
;

// Rule Exponent
ruleExponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExponentAccess().getGroup()); }
		(rule__Exponent__Group__0)
		{ after(grammarAccess.getExponentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getAlternatives()); }
		(rule__Not__Alternatives)
		{ after(grammarAccess.getNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getRefAssignment()); }
		(rule__Reference__RefAssignment)
		{ after(grammarAccess.getReferenceAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getStrAssignment()); }
		(rule__StringLiteral__StrAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getStrAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getNumbAssignment()); }
		(rule__NumberLiteral__NumbAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getNumbAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getBoolAssignment()); }
		(rule__BooleanLiteral__BoolAssignment)
		{ after(grammarAccess.getBooleanLiteralAccess().getBoolAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NUMBER
ruleNUMBER 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERAccess().getAlternatives()); }
		(rule__NUMBER__Alternatives)
		{ after(grammarAccess.getNUMBERAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__ChannelConfig__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChannelConfigAccess().getWifiParserRuleCall_0()); }
		ruleWifi
		{ after(grammarAccess.getChannelConfigAccess().getWifiParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getChannelConfigAccess().getSerialParserRuleCall_1()); }
		ruleSerial
		{ after(grammarAccess.getChannelConfigAccess().getSerialParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getChannelConfigAccess().getMqttClientParserRuleCall_2()); }
		ruleMqttClient
		{ after(grammarAccess.getChannelConfigAccess().getMqttClientParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopIdentifyer__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopIdentifyerAccess().getStopCharParserRuleCall_0()); }
		ruleStopChar
		{ after(grammarAccess.getStopIdentifyerAccess().getStopCharParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStopIdentifyerAccess().getStopByteParserRuleCall_1()); }
		ruleStopByte
		{ after(grammarAccess.getStopIdentifyerAccess().getStopByteParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardAccess().getNewBoardParserRuleCall_1_0()); }
		ruleNewBoard
		{ after(grammarAccess.getBoardAccess().getNewBoardParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoardAccess().getExtendsBoardParserRuleCall_1_1()); }
		ruleExtendsBoard
		{ after(grammarAccess.getBoardAccess().getExtendsBoardParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorTypeAccess().getExternalSensorParserRuleCall_0()); }
		ruleExternalSensor
		{ after(grammarAccess.getSensorTypeAccess().getExternalSensorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorTypeAccess().getOnboardSensorParserRuleCall_1()); }
		ruleOnboardSensor
		{ after(grammarAccess.getSensorTypeAccess().getOnboardSensorParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sampler__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSamplerAccess().getCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getSamplerAccess().getCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSamplerAccess().getFrequencyParserRuleCall_1()); }
		ruleFrequency
		{ after(grammarAccess.getSamplerAccess().getFrequencyParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResolutionAccess().getGroup_0()); }
		(rule__Resolution__Group_0__0)
		{ after(grammarAccess.getResolutionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getResolutionAccess().getGroup_1()); }
		(rule__Resolution__Group_1__0)
		{ after(grammarAccess.getResolutionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getResolutionAccess().getGroup_2()); }
		(rule__Resolution__Group_2__0)
		{ after(grammarAccess.getResolutionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getMapPipelineParserRuleCall_1_0()); }
		ruleMapPipeline
		{ after(grammarAccess.getPipelineAccess().getMapPipelineParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPipelineAccess().getWindowPipelineParserRuleCall_1_1()); }
		ruleWindowPipeline
		{ after(grammarAccess.getPipelineAccess().getWindowPipelineParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getPipelineAccess().getExternalParserRuleCall_1_2()); }
		ruleExternal
		{ after(grammarAccess.getPipelineAccess().getExternalParserRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExecutePipelineAccess().getGroup_0()); }
		(rule__ExecutePipeline__Group_0__0)
		{ after(grammarAccess.getExecutePipelineAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExecutePipelineAccess().getGroup_1()); }
		(rule__ExecutePipeline__Group_1__0)
		{ after(grammarAccess.getExecutePipelineAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getExecutePipelineAccess().getGroup_2()); }
		(rule__ExecutePipeline__Group_2__0)
		{ after(grammarAccess.getExecutePipelineAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getExecutePipelineAccess().getGroup_3()); }
		(rule__ExecutePipeline__Group_3__0)
		{ after(grammarAccess.getExecutePipelineAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup_1_0()); }
		(rule__Equality__Group_1_0__0)
		{ after(grammarAccess.getEqualityAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAccess().getGroup_1_1()); }
		(rule__Equality__Group_1_1__0)
		{ after(grammarAccess.getEqualityAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_0()); }
		(rule__Comparison__Group_1_0__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_1()); }
		(rule__Comparison__Group_1_1__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_2()); }
		(rule__Comparison__Group_1_2__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getGroup_1_3()); }
		(rule__Comparison__Group_1_3__0)
		{ after(grammarAccess.getComparisonAccess().getGroup_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAddAccess().getGroup_1_0()); }
		(rule__SubAdd__Group_1_0__0)
		{ after(grammarAccess.getSubAddAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSubAddAccess().getGroup_1_1()); }
		(rule__SubAdd__Group_1_1__0)
		{ after(grammarAccess.getSubAddAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivAccess().getGroup_1_0()); }
		(rule__MulDiv__Group_1_0__0)
		{ after(grammarAccess.getMulDivAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulDivAccess().getGroup_1_1()); }
		(rule__MulDiv__Group_1_1__0)
		{ after(grammarAccess.getMulDivAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getGroup_0()); }
		(rule__Negation__Group_0__0)
		{ after(grammarAccess.getNegationAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegationAccess().getExponentParserRuleCall_1()); }
		ruleExponent
		{ after(grammarAccess.getNegationAccess().getExponentParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getGroup_0()); }
		(rule__Not__Group_0__0)
		{ after(grammarAccess.getNotAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotAccess().getPrimaryParserRuleCall_1()); }
		rulePrimary
		{ after(grammarAccess.getNotAccess().getPrimaryParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getReferenceParserRuleCall_1()); }
		ruleReference
		{ after(grammarAccess.getPrimaryAccess().getReferenceParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_2()); }
		ruleNumberLiteral
		{ after(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getBooleanLiteralParserRuleCall_3()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getPrimaryAccess().getBooleanLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_4()); }
		ruleStringLiteral
		{ after(grammarAccess.getPrimaryAccess().getStringLiteralParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNUMBERAccess().getDBLTerminalRuleCall_1()); }
		RULE_DBL
		{ after(grammarAccess.getNUMBERAccess().getDBLTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNUMBERAccess().getNINTTerminalRuleCall_2()); }
		RULE_NINT
		{ after(grammarAccess.getNUMBERAccess().getNINTTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNUMBERAccess().getNDBLTerminalRuleCall_3()); }
		RULE_NDBL
		{ after(grammarAccess.getNUMBERAccess().getNDBLTerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getIncludesAssignment_0()); }
	(rule__Model__IncludesAssignment_0)*
	{ after(grammarAccess.getModelAccess().getIncludesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getWifiConfigAssignment_1()); }
	(rule__Model__WifiConfigAssignment_1)*
	{ after(grammarAccess.getModelAccess().getWifiConfigAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getChannelAssignment_2()); }
	(rule__Model__ChannelAssignment_2)*
	{ after(grammarAccess.getModelAccess().getChannelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getFunctionAssignment_3()); }
	(rule__Model__FunctionAssignment_3)*
	{ after(grammarAccess.getModelAccess().getFunctionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAbstractBoardAssignment_4()); }
	(rule__Model__AbstractBoardAssignment_4)*
	{ after(grammarAccess.getModelAccess().getAbstractBoardAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getBoardAssignment_5()); }
	(rule__Model__BoardAssignment_5)*
	{ after(grammarAccess.getModelAccess().getBoardAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
	Include
	{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getImportURIAssignment_1()); }
	(rule__Include__ImportURIAssignment_1)
	{ after(grammarAccess.getIncludeAccess().getImportURIAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getGroup_2()); }
	(rule__Include__Group_2__0)*
	{ after(grammarAccess.getIncludeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group_2__0__Impl
	rule__Include__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getFullStopKeyword_2_0()); }
	FullStop
	{ after(grammarAccess.getIncludeAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getImportURIAssignment_2_1()); }
	(rule__Include__ImportURIAssignment_2_1)
	{ after(grammarAccess.getIncludeAccess().getImportURIAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WifiConfig__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__0__Impl
	rule__WifiConfig__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getWifiKeyword_0()); }
	Wifi
	{ after(grammarAccess.getWifiConfigAccess().getWifiKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__1__Impl
	rule__WifiConfig__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getNameAssignment_1()); }
	(rule__WifiConfig__NameAssignment_1)
	{ after(grammarAccess.getWifiConfigAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__2__Impl
	rule__WifiConfig__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getWifiConfigAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__3__Impl
	rule__WifiConfig__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getWifiConfigAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__4__Impl
	rule__WifiConfig__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getSsidKeyword_4()); }
	Ssid
	{ after(grammarAccess.getWifiConfigAccess().getSsidKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__5__Impl
	rule__WifiConfig__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getSsidAssignment_5()); }
	(rule__WifiConfig__SsidAssignment_5)
	{ after(grammarAccess.getWifiConfigAccess().getSsidAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__6__Impl
	rule__WifiConfig__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getGroup_6()); }
	(rule__WifiConfig__Group_6__0)?
	{ after(grammarAccess.getWifiConfigAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getENDTerminalRuleCall_7()); }
	RULE_END
	{ after(grammarAccess.getWifiConfigAccess().getENDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WifiConfig__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group_6__0__Impl
	rule__WifiConfig__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getPassKeyword_6_0()); }
	Pass
	{ after(grammarAccess.getWifiConfigAccess().getPassKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WifiConfig__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiConfigAccess().getPassAssignment_6_1()); }
	(rule__WifiConfig__PassAssignment_6_1)
	{ after(grammarAccess.getWifiConfigAccess().getPassAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Channel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group__0__Impl
	rule__Channel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getCtypeAssignment_0()); }
	(rule__Channel__CtypeAssignment_0)?
	{ after(grammarAccess.getChannelAccess().getCtypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group__1__Impl
	rule__Channel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getChannelKeyword_1()); }
	Channel
	{ after(grammarAccess.getChannelAccess().getChannelKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group__2__Impl
	rule__Channel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getNameAssignment_2()); }
	(rule__Channel__NameAssignment_2)
	{ after(grammarAccess.getChannelAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getGroup_3()); }
	(rule__Channel__Group_3__0)?
	{ after(grammarAccess.getChannelAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Channel__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group_3__0__Impl
	rule__Channel__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getColonKeyword_3_0()); }
	Colon
	{ after(grammarAccess.getChannelAccess().getColonKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group_3__1__Impl
	rule__Channel__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getBEGINTerminalRuleCall_3_1()); }
	RULE_BEGIN
	{ after(grammarAccess.getChannelAccess().getBEGINTerminalRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group_3__2__Impl
	rule__Channel__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getConfigAssignment_3_2()); }
	(rule__Channel__ConfigAssignment_3_2)
	{ after(grammarAccess.getChannelAccess().getConfigAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Channel__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelAccess().getENDTerminalRuleCall_3_3()); }
	RULE_END
	{ after(grammarAccess.getChannelAccess().getENDTerminalRuleCall_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wifi__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wifi__Group__0__Impl
	rule__Wifi__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiAccess().getIpKeyword_0()); }
	Ip
	{ after(grammarAccess.getWifiAccess().getIpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wifi__Group__1__Impl
	rule__Wifi__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiAccess().getUrlAssignment_1()); }
	(rule__Wifi__UrlAssignment_1)
	{ after(grammarAccess.getWifiAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wifi__Group__2__Impl
	rule__Wifi__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiAccess().getPortKeyword_2()); }
	Port
	{ after(grammarAccess.getWifiAccess().getPortKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wifi__Group__3__Impl
	rule__Wifi__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiAccess().getSportAssignment_3()); }
	(rule__Wifi__SportAssignment_3)
	{ after(grammarAccess.getWifiAccess().getSportAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wifi__Group__4__Impl
	rule__Wifi__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiAccess().getRouteKeyword_4()); }
	Route
	{ after(grammarAccess.getWifiAccess().getRouteKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wifi__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWifiAccess().getRouteAssignment_5()); }
	(rule__Wifi__RouteAssignment_5)
	{ after(grammarAccess.getWifiAccess().getRouteAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Serial__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Serial__Group__0__Impl
	rule__Serial__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerialAccess().getBaudKeyword_0()); }
	Baud
	{ after(grammarAccess.getSerialAccess().getBaudKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Serial__Group__1__Impl
	rule__Serial__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerialAccess().getBaudAssignment_1()); }
	(rule__Serial__BaudAssignment_1)
	{ after(grammarAccess.getSerialAccess().getBaudAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Serial__Group__2__Impl
	rule__Serial__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerialAccess().getStopKeyword_2()); }
	Stop
	{ after(grammarAccess.getSerialAccess().getStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Serial__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSerialAccess().getStopTypeAssignment_3()); }
	(rule__Serial__StopTypeAssignment_3)
	{ after(grammarAccess.getSerialAccess().getStopTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StopChar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopChar__Group__0__Impl
	rule__StopChar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StopChar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopCharAccess().getCharKeyword_0()); }
	Char
	{ after(grammarAccess.getStopCharAccess().getCharKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopChar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopChar__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StopChar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopCharAccess().getNameAssignment_1()); }
	(rule__StopChar__NameAssignment_1)
	{ after(grammarAccess.getStopCharAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StopByte__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopByte__Group__0__Impl
	rule__StopByte__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StopByte__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopByteAccess().getByteKeyword_0()); }
	Byte
	{ after(grammarAccess.getStopByteAccess().getByteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopByte__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopByte__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StopByte__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopByteAccess().getNameAssignment_1()); }
	(rule__StopByte__NameAssignment_1)
	{ after(grammarAccess.getStopByteAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MqttClient__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__0__Impl
	rule__MqttClient__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getBrokerKeyword_0()); }
	Broker
	{ after(grammarAccess.getMqttClientAccess().getBrokerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__1__Impl
	rule__MqttClient__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getBrokerAssignment_1()); }
	(rule__MqttClient__BrokerAssignment_1)
	{ after(grammarAccess.getMqttClientAccess().getBrokerAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__2__Impl
	rule__MqttClient__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getPortKeyword_2()); }
	Port
	{ after(grammarAccess.getMqttClientAccess().getPortKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__3__Impl
	rule__MqttClient__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getPortAssignment_3()); }
	(rule__MqttClient__PortAssignment_3)
	{ after(grammarAccess.getMqttClientAccess().getPortAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__4__Impl
	rule__MqttClient__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getIdKeyword_4()); }
	Id
	{ after(grammarAccess.getMqttClientAccess().getIdKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__5__Impl
	rule__MqttClient__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getClientAssignment_5()); }
	(rule__MqttClient__ClientAssignment_5)
	{ after(grammarAccess.getMqttClientAccess().getClientAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__6__Impl
	rule__MqttClient__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getTopicKeyword_6()); }
	Topic
	{ after(grammarAccess.getMqttClientAccess().getTopicKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MqttClient__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMqttClientAccess().getPubAssignment_7()); }
	(rule__MqttClient__PubAssignment_7)
	{ after(grammarAccess.getMqttClientAccess().getPubAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	Function
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getInputAssignment_3()); }
	(rule__Function__InputAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getInputAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_4()); }
	(rule__Function__Group_4__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
	rule__Function__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getHyphenMinusGreaterThanSignKeyword_6()); }
	HyphenMinusGreaterThanSign
	{ after(grammarAccess.getFunctionAccess().getHyphenMinusGreaterThanSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__7__Impl
	rule__Function__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_7()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__8__Impl
	rule__Function__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getOutputAssignment_8()); }
	(rule__Function__OutputAssignment_8)
	{ after(grammarAccess.getFunctionAccess().getOutputAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__9__Impl
	rule__Function__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_9()); }
	(rule__Function__Group_9__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_10()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_4__0__Impl
	rule__Function__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
	Comma
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getInputAssignment_4_1()); }
	(rule__Function__InputAssignment_4_1)
	{ after(grammarAccess.getFunctionAccess().getInputAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_9__0__Impl
	rule__Function__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_9_0()); }
	Comma
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getOutputAssignment_9_1()); }
	(rule__Function__OutputAssignment_9_1)
	{ after(grammarAccess.getFunctionAccess().getOutputAssignment_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Board__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__0__Impl
	rule__Board__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getBoardKeyword_0()); }
	Board
	{ after(grammarAccess.getBoardAccess().getBoardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getAlternatives_1()); }
	(rule__Board__Alternatives_1)
	{ after(grammarAccess.getBoardAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewBoard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__0__Impl
	rule__NewBoard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getNameAssignment_0()); }
	(rule__NewBoard__NameAssignment_0)
	{ after(grammarAccess.getNewBoardAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__1__Impl
	rule__NewBoard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getNewBoardAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__2__Impl
	rule__NewBoard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getBEGINTerminalRuleCall_2()); }
	RULE_BEGIN
	{ after(grammarAccess.getNewBoardAccess().getBEGINTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__3__Impl
	rule__NewBoard__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getVersionAssignment_3()); }
	(rule__NewBoard__VersionAssignment_3)
	{ after(grammarAccess.getNewBoardAccess().getVersionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__4__Impl
	rule__NewBoard__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getGroup_4()); }
	(rule__NewBoard__Group_4__0)?
	{ after(grammarAccess.getNewBoardAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__5__Impl
	rule__NewBoard__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNewBoardAccess().getSensorsAssignment_5()); }
		(rule__NewBoard__SensorsAssignment_5)
		{ after(grammarAccess.getNewBoardAccess().getSensorsAssignment_5()); }
	)
	(
		{ before(grammarAccess.getNewBoardAccess().getSensorsAssignment_5()); }
		(rule__NewBoard__SensorsAssignment_5)*
		{ after(grammarAccess.getNewBoardAccess().getSensorsAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getENDTerminalRuleCall_6()); }
	RULE_END
	{ after(grammarAccess.getNewBoardAccess().getENDTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NewBoard__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group_4__0__Impl
	rule__NewBoard__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getWifiKeyword_4_0()); }
	Wifi
	{ after(grammarAccess.getNewBoardAccess().getWifiKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NewBoard__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNewBoardAccess().getWifiSelectAssignment_4_1()); }
	(rule__NewBoard__WifiSelectAssignment_4_1)
	{ after(grammarAccess.getNewBoardAccess().getWifiSelectAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoardVersion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoardVersion__Group__0__Impl
	rule__BoardVersion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardVersionAccess().getTypeKeyword_0()); }
	Type
	{ after(grammarAccess.getBoardVersionAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoardVersion__Group__1__Impl
	rule__BoardVersion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardVersionAccess().getTypeAssignment_1()); }
	(rule__BoardVersion__TypeAssignment_1)
	{ after(grammarAccess.getBoardVersionAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoardVersion__Group__2__Impl
	rule__BoardVersion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardVersionAccess().getModelKeyword_2()); }
	Model
	{ after(grammarAccess.getBoardVersionAccess().getModelKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoardVersion__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardVersionAccess().getModelAssignment_3()); }
	(rule__BoardVersion__ModelAssignment_3)
	{ after(grammarAccess.getBoardVersionAccess().getModelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendsBoard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group__0__Impl
	rule__ExtendsBoard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getNameAssignment_0()); }
	(rule__ExtendsBoard__NameAssignment_0)
	{ after(grammarAccess.getExtendsBoardAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group__1__Impl
	rule__ExtendsBoard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getExtendsKeyword_1()); }
	Extends
	{ after(grammarAccess.getExtendsBoardAccess().getExtendsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group__2__Impl
	rule__ExtendsBoard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getAbstractBoardAssignment_2()); }
	(rule__ExtendsBoard__AbstractBoardAssignment_2)
	{ after(grammarAccess.getExtendsBoardAccess().getAbstractBoardAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getGroup_3()); }
	(rule__ExtendsBoard__Group_3__0)?
	{ after(grammarAccess.getExtendsBoardAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendsBoard__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3__0__Impl
	rule__ExtendsBoard__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getColonKeyword_3_0()); }
	Colon
	{ after(grammarAccess.getExtendsBoardAccess().getColonKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3__1__Impl
	rule__ExtendsBoard__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getBEGINTerminalRuleCall_3_1()); }
	RULE_BEGIN
	{ after(grammarAccess.getExtendsBoardAccess().getBEGINTerminalRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3__2__Impl
	rule__ExtendsBoard__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getGroup_3_2()); }
	(rule__ExtendsBoard__Group_3_2__0)?
	{ after(grammarAccess.getExtendsBoardAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3__3__Impl
	rule__ExtendsBoard__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getSensorsAssignment_3_3()); }
	(rule__ExtendsBoard__SensorsAssignment_3_3)*
	{ after(grammarAccess.getExtendsBoardAccess().getSensorsAssignment_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getENDTerminalRuleCall_3_4()); }
	RULE_END
	{ after(grammarAccess.getExtendsBoardAccess().getENDTerminalRuleCall_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendsBoard__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3_2__0__Impl
	rule__ExtendsBoard__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getWifiKeyword_3_2_0()); }
	Wifi
	{ after(grammarAccess.getExtendsBoardAccess().getWifiKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExtendsBoard__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendsBoardAccess().getWifiSelectAssignment_3_2_1()); }
	(rule__ExtendsBoard__WifiSelectAssignment_3_2_1)
	{ after(grammarAccess.getExtendsBoardAccess().getWifiSelectAssignment_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractBoard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__0__Impl
	rule__AbstractBoard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getAbstractKeyword_0()); }
	Abstract
	{ after(grammarAccess.getAbstractBoardAccess().getAbstractKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__1__Impl
	rule__AbstractBoard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getBoardKeyword_1()); }
	Board
	{ after(grammarAccess.getAbstractBoardAccess().getBoardKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__2__Impl
	rule__AbstractBoard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getNameAssignment_2()); }
	(rule__AbstractBoard__NameAssignment_2)
	{ after(grammarAccess.getAbstractBoardAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__3__Impl
	rule__AbstractBoard__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getColonKeyword_3()); }
	Colon
	{ after(grammarAccess.getAbstractBoardAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__4__Impl
	rule__AbstractBoard__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getBEGINTerminalRuleCall_4()); }
	RULE_BEGIN
	{ after(grammarAccess.getAbstractBoardAccess().getBEGINTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__5__Impl
	rule__AbstractBoard__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getVersionAssignment_5()); }
	(rule__AbstractBoard__VersionAssignment_5)
	{ after(grammarAccess.getAbstractBoardAccess().getVersionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__6__Impl
	rule__AbstractBoard__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAbstractBoardAccess().getSensorsAssignment_6()); }
		(rule__AbstractBoard__SensorsAssignment_6)
		{ after(grammarAccess.getAbstractBoardAccess().getSensorsAssignment_6()); }
	)
	(
		{ before(grammarAccess.getAbstractBoardAccess().getSensorsAssignment_6()); }
		(rule__AbstractBoard__SensorsAssignment_6)*
		{ after(grammarAccess.getAbstractBoardAccess().getSensorsAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractBoard__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractBoardAccess().getENDTerminalRuleCall_7()); }
	RULE_END
	{ after(grammarAccess.getAbstractBoardAccess().getENDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
	Sensor
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
	rule__Sensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getNameAssignment_1()); }
	(rule__Sensor__NameAssignment_1)
	{ after(grammarAccess.getSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__2__Impl
	rule__Sensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getEqualsSignKeyword_2()); }
	EqualsSign
	{ after(grammarAccess.getSensorAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__3__Impl
	rule__Sensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensortypeAssignment_3()); }
	(rule__Sensor__SensortypeAssignment_3)
	{ after(grammarAccess.getSensorAccess().getSensortypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__4__Impl
	rule__Sensor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getAsKeyword_4()); }
	As
	{ after(grammarAccess.getSensorAccess().getAsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__5__Impl
	rule__Sensor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getVarsAssignment_5()); }
	(rule__Sensor__VarsAssignment_5)
	{ after(grammarAccess.getSensorAccess().getVarsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__6__Impl
	rule__Sensor__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getColonKeyword_6()); }
	Colon
	{ after(grammarAccess.getSensorAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__7__Impl
	rule__Sensor__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getBEGINTerminalRuleCall_7()); }
	RULE_BEGIN
	{ after(grammarAccess.getSensorAccess().getBEGINTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__8__Impl
	rule__Sensor__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_8()); }
	(rule__Sensor__Group_8__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__9__Impl
	rule__Sensor__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getGroup_9()); }
	(rule__Sensor__Group_9__0)?
	{ after(grammarAccess.getSensorAccess().getGroup_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__10__Impl
	rule__Sensor__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSensorAccess().getOutputAssignment_10()); }
		(rule__Sensor__OutputAssignment_10)
		{ after(grammarAccess.getSensorAccess().getOutputAssignment_10()); }
	)
	(
		{ before(grammarAccess.getSensorAccess().getOutputAssignment_10()); }
		(rule__Sensor__OutputAssignment_10)*
		{ after(grammarAccess.getSensorAccess().getOutputAssignment_10()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getENDTerminalRuleCall_11()); }
	RULE_END
	{ after(grammarAccess.getSensorAccess().getENDTerminalRuleCall_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_8__0__Impl
	rule__Sensor__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSampleKeyword_8_0()); }
	Sample
	{ after(grammarAccess.getSensorAccess().getSampleKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSamplerAssignment_8_1()); }
	(rule__Sensor__SamplerAssignment_8_1)
	{ after(grammarAccess.getSensorAccess().getSamplerAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_9__0__Impl
	rule__Sensor__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getVccKeyword_9_0()); }
	Vcc
	{ after(grammarAccess.getSensorAccess().getVccKeyword_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getVccAssignment_9_1()); }
	(rule__Sensor__VccAssignment_9_1)
	{ after(grammarAccess.getSensorAccess().getVccAssignment_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group__0__Impl
	rule__ExternalSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getNameAssignment_0()); }
	(rule__ExternalSensor__NameAssignment_0)
	{ after(grammarAccess.getExternalSensorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group__1__Impl
	rule__ExternalSensor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getExternalSensorAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group__2__Impl
	rule__ExternalSensor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getPinsAssignment_2()); }
	(rule__ExternalSensor__PinsAssignment_2)
	{ after(grammarAccess.getExternalSensorAccess().getPinsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group__3__Impl
	rule__ExternalSensor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getGroup_3()); }
	(rule__ExternalSensor__Group_3__0)*
	{ after(grammarAccess.getExternalSensorAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getExternalSensorAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalSensor__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group_3__0__Impl
	rule__ExternalSensor__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getExternalSensorAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalSensor__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalSensorAccess().getPinsAssignment_3_1()); }
	(rule__ExternalSensor__PinsAssignment_3_1)
	{ after(grammarAccess.getExternalSensorAccess().getPinsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorVariables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group__0__Impl
	rule__SensorVariables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getNameAssignment_0()); }
	(rule__SensorVariables__NameAssignment_0)
	{ after(grammarAccess.getSensorVariablesAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group__1__Impl
	rule__SensorVariables__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getSensorVariablesAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group__2__Impl
	rule__SensorVariables__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getIdsAssignment_2()); }
	(rule__SensorVariables__IdsAssignment_2)
	{ after(grammarAccess.getSensorVariablesAccess().getIdsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group__3__Impl
	rule__SensorVariables__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getGroup_3()); }
	(rule__SensorVariables__Group_3__0)*
	{ after(grammarAccess.getSensorVariablesAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getSensorVariablesAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorVariables__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group_3__0__Impl
	rule__SensorVariables__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getSensorVariablesAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorVariables__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorVariablesAccess().getIdsAssignment_3_1()); }
	(rule__SensorVariables__IdsAssignment_3_1)
	{ after(grammarAccess.getSensorVariablesAccess().getIdsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__0__Impl
	rule__Command__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandKeyword_0()); }
	Command
	{ after(grammarAccess.getCommandAccess().getCommandKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__1__Impl
	rule__Command__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAssignment_1()); }
	(rule__Command__CommandAssignment_1)
	{ after(grammarAccess.getCommandAccess().getCommandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getTopicAssignment_2()); }
	(rule__Command__TopicAssignment_2)?
	{ after(grammarAccess.getCommandAccess().getTopicAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Frequency__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group__0__Impl
	rule__Frequency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getFrequencyKeyword_0()); }
	Frequency
	{ after(grammarAccess.getFrequencyAccess().getFrequencyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group__1__Impl
	rule__Frequency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getFrequencyAssignment_1()); }
	(rule__Frequency__FrequencyAssignment_1)
	{ after(grammarAccess.getFrequencyAccess().getFrequencyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Frequency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFrequencyAccess().getResolutionAssignment_2()); }
	(rule__Frequency__ResolutionAssignment_2)
	{ after(grammarAccess.getFrequencyAccess().getResolutionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Resolution__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resolution__Group_0__0__Impl
	rule__Resolution__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResolutionAccess().getSecondsAction_0_0()); }
	()
	{ after(grammarAccess.getResolutionAccess().getSecondsAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resolution__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResolutionAccess().getSecondsKeyword_0_1()); }
	Seconds
	{ after(grammarAccess.getResolutionAccess().getSecondsKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Resolution__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resolution__Group_1__0__Impl
	rule__Resolution__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResolutionAccess().getMillisAction_1_0()); }
	()
	{ after(grammarAccess.getResolutionAccess().getMillisAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resolution__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResolutionAccess().getMillisecondsKeyword_1_1()); }
	Milliseconds
	{ after(grammarAccess.getResolutionAccess().getMillisecondsKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Resolution__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resolution__Group_2__0__Impl
	rule__Resolution__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResolutionAccess().getMicrosAction_2_0()); }
	()
	{ after(grammarAccess.getResolutionAccess().getMicrosAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Resolution__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Resolution__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResolutionAccess().getMicrosecondsKeyword_2_1()); }
	Microseconds
	{ after(grammarAccess.getResolutionAccess().getMicrosecondsKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorOutput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group__0__Impl
	rule__SensorOutput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getPipeKeyword_0()); }
	Pipe
	{ after(grammarAccess.getSensorOutputAccess().getPipeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group__1__Impl
	rule__SensorOutput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getOutputAssignment_1()); }
	(rule__SensorOutput__OutputAssignment_1)
	{ after(grammarAccess.getSensorOutputAccess().getOutputAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group__2__Impl
	rule__SensorOutput__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
	HyphenMinusGreaterThanSign
	{ after(grammarAccess.getSensorOutputAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group__3__Impl
	rule__SensorOutput__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getChannelAssignment_3()); }
	(rule__SensorOutput__ChannelAssignment_3)
	{ after(grammarAccess.getSensorOutputAccess().getChannelAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getGroup_4()); }
	(rule__SensorOutput__Group_4__0)*
	{ after(grammarAccess.getSensorOutputAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SensorOutput__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group_4__0__Impl
	rule__SensorOutput__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getAndKeyword_4_0()); }
	And
	{ after(grammarAccess.getSensorOutputAccess().getAndKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SensorOutput__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorOutputAccess().getChannelAssignment_4_1()); }
	(rule__SensorOutput__ChannelAssignment_4_1)
	{ after(grammarAccess.getSensorOutputAccess().getChannelAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataOutput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataOutput__Group__0__Impl
	rule__DataOutput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataOutput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataOutputAccess().getSensorvarAssignment_0()); }
	(rule__DataOutput__SensorvarAssignment_0)
	{ after(grammarAccess.getDataOutputAccess().getSensorvarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataOutput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataOutput__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataOutput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataOutputAccess().getPipelineAssignment_1()); }
	(rule__DataOutput__PipelineAssignment_1)?
	{ after(grammarAccess.getDataOutputAccess().getPipelineAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pipeline__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group__0__Impl
	rule__Pipeline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getFullStopKeyword_0()); }
	FullStop
	{ after(grammarAccess.getPipelineAccess().getFullStopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group__1__Impl
	rule__Pipeline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getAlternatives_1()); }
	(rule__Pipeline__Alternatives_1)
	{ after(grammarAccess.getPipelineAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getNextAssignment_2()); }
	(rule__Pipeline__NextAssignment_2)?
	{ after(grammarAccess.getPipelineAccess().getNextAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__External__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__0__Impl
	rule__External__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getFunctionAssignment_0()); }
	(rule__External__FunctionAssignment_0)
	{ after(grammarAccess.getExternalAccess().getFunctionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__1__Impl
	rule__External__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getLeftSquareBracketKeyword_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getExternalAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__2__Impl
	rule__External__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getInputAssignment_2()); }
	(rule__External__InputAssignment_2)
	{ after(grammarAccess.getExternalAccess().getInputAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__3__Impl
	rule__External__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getGroup_3()); }
	(rule__External__Group_3__0)*
	{ after(grammarAccess.getExternalAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getRightSquareBracketKeyword_4()); }
	RightSquareBracket
	{ after(grammarAccess.getExternalAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__External__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group_3__0__Impl
	rule__External__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getExternalAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getInputAssignment_3_1()); }
	(rule__External__InputAssignment_3_1)
	{ after(grammarAccess.getExternalAccess().getInputAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapPipeline__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__0__Impl
	rule__MapPipeline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getMapAction_0()); }
	()
	{ after(grammarAccess.getMapPipelineAccess().getMapAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__1__Impl
	rule__MapPipeline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getMapKeyword_1()); }
	Map
	{ after(grammarAccess.getMapPipelineAccess().getMapKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__2__Impl
	rule__MapPipeline__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getLeftSquareBracketKeyword_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getMapPipelineAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__3__Impl
	rule__MapPipeline__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getExpressionAssignment_3()); }
	(rule__MapPipeline__ExpressionAssignment_3)
	{ after(grammarAccess.getMapPipelineAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__4__Impl
	rule__MapPipeline__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
	HyphenMinusGreaterThanSign
	{ after(grammarAccess.getMapPipelineAccess().getHyphenMinusGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__5__Impl
	rule__MapPipeline__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getOutputAssignment_5()); }
	(rule__MapPipeline__OutputAssignment_5)
	{ after(grammarAccess.getMapPipelineAccess().getOutputAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapPipeline__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapPipelineAccess().getRightSquareBracketKeyword_6()); }
	RightSquareBracket
	{ after(grammarAccess.getMapPipelineAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WindowPipeline__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__0__Impl
	rule__WindowPipeline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getWindowAction_0()); }
	()
	{ after(grammarAccess.getWindowPipelineAccess().getWindowAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__1__Impl
	rule__WindowPipeline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getByWindowKeyword_1()); }
	ByWindow
	{ after(grammarAccess.getWindowPipelineAccess().getByWindowKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__2__Impl
	rule__WindowPipeline__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getLeftSquareBracketKeyword_2()); }
	LeftSquareBracket
	{ after(grammarAccess.getWindowPipelineAccess().getLeftSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__3__Impl
	rule__WindowPipeline__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getWidthAssignment_3()); }
	(rule__WindowPipeline__WidthAssignment_3)
	{ after(grammarAccess.getWindowPipelineAccess().getWidthAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__4__Impl
	rule__WindowPipeline__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getRightSquareBracketKeyword_4()); }
	RightSquareBracket
	{ after(grammarAccess.getWindowPipelineAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__5__Impl
	rule__WindowPipeline__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getFullStopKeyword_5()); }
	FullStop
	{ after(grammarAccess.getWindowPipelineAccess().getFullStopKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WindowPipeline__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWindowPipelineAccess().getExecuteAssignment_6()); }
	(rule__WindowPipeline__ExecuteAssignment_6)
	{ after(grammarAccess.getWindowPipelineAccess().getExecuteAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExecutePipeline__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_0__0__Impl
	rule__ExecutePipeline__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMeanAction_0_0()); }
	()
	{ after(grammarAccess.getExecutePipelineAccess().getMeanAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMeanKeyword_0_1()); }
	Mean
	{ after(grammarAccess.getExecutePipelineAccess().getMeanKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExecutePipeline__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_1__0__Impl
	rule__ExecutePipeline__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMedianAction_1_0()); }
	()
	{ after(grammarAccess.getExecutePipelineAccess().getMedianAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMedianKeyword_1_1()); }
	Median
	{ after(grammarAccess.getExecutePipelineAccess().getMedianKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExecutePipeline__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_2__0__Impl
	rule__ExecutePipeline__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMinAction_2_0()); }
	()
	{ after(grammarAccess.getExecutePipelineAccess().getMinAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMinKeyword_2_1()); }
	Min
	{ after(grammarAccess.getExecutePipelineAccess().getMinKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExecutePipeline__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_3__0__Impl
	rule__ExecutePipeline__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMaxAction_3_0()); }
	()
	{ after(grammarAccess.getExecutePipelineAccess().getMaxAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExecutePipeline__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExecutePipeline__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExecutePipelineAccess().getMaxKeyword_3_1()); }
	Max
	{ after(grammarAccess.getExecutePipelineAccess().getMaxKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getConditionalAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getGroup_1()); }
	(rule__Conditional__Group_1__0)?
	{ after(grammarAccess.getConditionalAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_1__0__Impl
	rule__Conditional__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getConditionalConditionAction_1_0()); }
	()
	{ after(grammarAccess.getConditionalAccess().getConditionalConditionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_1__1__Impl
	rule__Conditional__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getQuestionMarkKeyword_1_1()); }
	QuestionMark
	{ after(grammarAccess.getConditionalAccess().getQuestionMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_1__2__Impl
	rule__Conditional__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getCorrectAssignment_1_2()); }
	(rule__Conditional__CorrectAssignment_1_2)
	{ after(grammarAccess.getConditionalAccess().getCorrectAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_1__3__Impl
	rule__Conditional__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getColonKeyword_1_3()); }
	Colon
	{ after(grammarAccess.getConditionalAccess().getColonKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIncorrectAssignment_1_4()); }
	(rule__Conditional__IncorrectAssignment_1_4)
	{ after(grammarAccess.getConditionalAccess().getIncorrectAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)?
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	VerticalLineVerticalLine
	{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
	{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)?
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	AmpersandAmpersand
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getAlternatives_1()); }
	(rule__Equality__Alternatives_1)*
	{ after(grammarAccess.getEqualityAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1_0__0__Impl
	rule__Equality__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1_0__1__Impl
	rule__Equality__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_1()); }
	EqualsSignEqualsSign
	{ after(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_0_2()); }
	(rule__Equality__RightAssignment_1_0_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1_1__0__Impl
	rule__Equality__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getUnequalLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getUnequalLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1_1__1__Impl
	rule__Equality__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_1_1()); }
	ExclamationMarkEqualsSign
	{ after(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_1_2()); }
	(rule__Equality__RightAssignment_1_1_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getSubAddParserRuleCall_0()); }
	ruleSubAdd
	{ after(grammarAccess.getComparisonAccess().getSubAddParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getAlternatives_1()); }
	(rule__Comparison__Alternatives_1)*
	{ after(grammarAccess.getComparisonAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__0__Impl
	rule__Comparison__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getLessThanLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__1__Impl
	rule__Comparison__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_1()); }
	LessThanSign
	{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_0_2()); }
	(rule__Comparison__RightAssignment_1_0_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_1__0__Impl
	rule__Comparison__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanEqualLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getLessThanEqualLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_1__1__Impl
	rule__Comparison__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_1_1()); }
	LessThanSignEqualsSign
	{ after(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1_2()); }
	(rule__Comparison__RightAssignment_1_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_2__0__Impl
	rule__Comparison__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_2_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getGreaterThanLeftAction_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_2__1__Impl
	rule__Comparison__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_2_1()); }
	GreaterThanSign
	{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2_2()); }
	(rule__Comparison__RightAssignment_1_2_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_3__0__Impl
	rule__Comparison__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanEqualLeftAction_1_3_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getGreaterThanEqualLeftAction_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_3__1__Impl
	rule__Comparison__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_3_1()); }
	GreaterThanSignEqualsSign
	{ after(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_3_2()); }
	(rule__Comparison__RightAssignment_1_3_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubAdd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group__0__Impl
	rule__SubAdd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getMulDivParserRuleCall_0()); }
	ruleMulDiv
	{ after(grammarAccess.getSubAddAccess().getMulDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getAlternatives_1()); }
	(rule__SubAdd__Alternatives_1)*
	{ after(grammarAccess.getSubAddAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubAdd__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group_1_0__0__Impl
	rule__SubAdd__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getPlusLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getSubAddAccess().getPlusLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group_1_0__1__Impl
	rule__SubAdd__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getPlusSignKeyword_1_0_1()); }
	PlusSign
	{ after(grammarAccess.getSubAddAccess().getPlusSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getRightAssignment_1_0_2()); }
	(rule__SubAdd__RightAssignment_1_0_2)
	{ after(grammarAccess.getSubAddAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubAdd__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group_1_1__0__Impl
	rule__SubAdd__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getMinusLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getSubAddAccess().getMinusLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group_1_1__1__Impl
	rule__SubAdd__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getHyphenMinusKeyword_1_1_1()); }
	HyphenMinus
	{ after(grammarAccess.getSubAddAccess().getHyphenMinusKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubAdd__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubAddAccess().getRightAssignment_1_1_2()); }
	(rule__SubAdd__RightAssignment_1_1_2)
	{ after(grammarAccess.getSubAddAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group__0__Impl
	rule__MulDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getNegationParserRuleCall_0()); }
	ruleNegation
	{ after(grammarAccess.getMulDivAccess().getNegationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getAlternatives_1()); }
	(rule__MulDiv__Alternatives_1)*
	{ after(grammarAccess.getMulDivAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0__0__Impl
	rule__MulDiv__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getMulLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getMulDivAccess().getMulLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0__1__Impl
	rule__MulDiv__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getAsteriskKeyword_1_0_1()); }
	Asterisk
	{ after(grammarAccess.getMulDivAccess().getAsteriskKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getRightAssignment_1_0_2()); }
	(rule__MulDiv__RightAssignment_1_0_2)
	{ after(grammarAccess.getMulDivAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulDiv__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_1__0__Impl
	rule__MulDiv__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getDivLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getMulDivAccess().getDivLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_1__1__Impl
	rule__MulDiv__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getSolidusKeyword_1_1_1()); }
	Solidus
	{ after(grammarAccess.getMulDivAccess().getSolidusKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulDiv__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulDivAccess().getRightAssignment_1_1_2()); }
	(rule__MulDiv__RightAssignment_1_1_2)
	{ after(grammarAccess.getMulDivAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Negation__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group_0__0__Impl
	rule__Negation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getNegationAction_0_0()); }
	()
	{ after(grammarAccess.getNegationAccess().getNegationAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group_0__1__Impl
	rule__Negation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getHyphenMinusKeyword_0_1()); }
	HyphenMinus
	{ after(grammarAccess.getNegationAccess().getHyphenMinusKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Negation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationAccess().getValueAssignment_0_2()); }
	(rule__Negation__ValueAssignment_0_2)
	{ after(grammarAccess.getNegationAccess().getValueAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exponent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponent__Group__0__Impl
	rule__Exponent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentAccess().getNotParserRuleCall_0()); }
	ruleNot
	{ after(grammarAccess.getExponentAccess().getNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentAccess().getGroup_1()); }
	(rule__Exponent__Group_1__0)?
	{ after(grammarAccess.getExponentAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exponent__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponent__Group_1__0__Impl
	rule__Exponent__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentAccess().getExponentBaseAction_1_0()); }
	()
	{ after(grammarAccess.getExponentAccess().getExponentBaseAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponent__Group_1__1__Impl
	rule__Exponent__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentAccess().getAsteriskAsteriskKeyword_1_1()); }
	AsteriskAsterisk
	{ after(grammarAccess.getExponentAccess().getAsteriskAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exponent__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExponentAccess().getPowerAssignment_1_2()); }
	(rule__Exponent__PowerAssignment_1_2)
	{ after(grammarAccess.getExponentAccess().getPowerAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__0__Impl
	rule__Not__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_0_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__1__Impl
	rule__Not__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getExclamationMarkKeyword_0_1()); }
	ExclamationMark
	{ after(grammarAccess.getNotAccess().getExclamationMarkKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getValueAssignment_0_2()); }
	(rule__Not__ValueAssignment_0_2)
	{ after(grammarAccess.getNotAccess().getValueAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__IncludesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getIncludesIncludeParserRuleCall_0_0()); }
		ruleInclude
		{ after(grammarAccess.getModelAccess().getIncludesIncludeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__WifiConfigAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWifiConfigWifiConfigParserRuleCall_1_0()); }
		ruleWifiConfig
		{ after(grammarAccess.getModelAccess().getWifiConfigWifiConfigParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ChannelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getChannelChannelParserRuleCall_2_0()); }
		ruleChannel
		{ after(grammarAccess.getModelAccess().getChannelChannelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FunctionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionFunctionParserRuleCall_3_0()); }
		ruleFunction
		{ after(grammarAccess.getModelAccess().getFunctionFunctionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__AbstractBoardAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getAbstractBoardAbstractBoardParserRuleCall_4_0()); }
		ruleAbstractBoard
		{ after(grammarAccess.getModelAccess().getAbstractBoardAbstractBoardParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__BoardAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBoardBoardParserRuleCall_5_0()); }
		ruleBoard
		{ after(grammarAccess.getModelAccess().getBoardBoardParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ImportURIAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncludeAccess().getImportURIIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIncludeAccess().getImportURIIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__ImportURIAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncludeAccess().getImportURIIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIncludeAccess().getImportURIIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWifiConfigAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWifiConfigAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__SsidAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWifiConfigAccess().getSsidSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getWifiConfigAccess().getSsidSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WifiConfig__PassAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWifiConfigAccess().getPassSTRINGTerminalRuleCall_6_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getWifiConfigAccess().getPassSTRINGTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__CtypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChannelAccess().getCtypeChannelTypeParserRuleCall_0_0()); }
		ruleChannelType
		{ after(grammarAccess.getChannelAccess().getCtypeChannelTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChannelAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getChannelAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Channel__ConfigAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChannelAccess().getConfigChannelConfigParserRuleCall_3_2_0()); }
		ruleChannelConfig
		{ after(grammarAccess.getChannelAccess().getConfigChannelConfigParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChannelTypeAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getChannelTypeAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWifiAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getWifiAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__SportAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWifiAccess().getSportINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getWifiAccess().getSportINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wifi__RouteAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWifiAccess().getRouteSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getWifiAccess().getRouteSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__BaudAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSerialAccess().getBaudINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSerialAccess().getBaudINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Serial__StopTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSerialAccess().getStopTypeStopIdentifyerParserRuleCall_3_0()); }
		ruleStopIdentifyer
		{ after(grammarAccess.getSerialAccess().getStopTypeStopIdentifyerParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopChar__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopCharAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getStopCharAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopByte__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopByteAccess().getNameINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStopByteAccess().getNameINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__BrokerAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMqttClientAccess().getBrokerSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getMqttClientAccess().getBrokerSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__PortAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMqttClientAccess().getPortINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getMqttClientAccess().getPortINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__ClientAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMqttClientAccess().getClientSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getMqttClientAccess().getClientSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MqttClient__PubAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMqttClientAccess().getPubSTRINGTerminalRuleCall_7_0()); }
		RULE_STRING
		{ after(grammarAccess.getMqttClientAccess().getPubSTRINGTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__InputAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getInputFunctionInputTypeParserRuleCall_3_0()); }
		ruleFunctionInputType
		{ after(grammarAccess.getFunctionAccess().getInputFunctionInputTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__InputAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getInputFunctionInputTypeParserRuleCall_4_1_0()); }
		ruleFunctionInputType
		{ after(grammarAccess.getFunctionAccess().getInputFunctionInputTypeParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__OutputAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getOutputIDTerminalRuleCall_8_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getOutputIDTerminalRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__OutputAssignment_9_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getOutputIDTerminalRuleCall_9_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getOutputIDTerminalRuleCall_9_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionInputType__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionInputTypeAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionInputTypeAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewBoardAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getNewBoardAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__VersionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewBoardAccess().getVersionBoardVersionParserRuleCall_3_0()); }
		ruleBoardVersion
		{ after(grammarAccess.getNewBoardAccess().getVersionBoardVersionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__WifiSelectAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewBoardAccess().getWifiSelectWifiConfigCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getNewBoardAccess().getWifiSelectWifiConfigIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNewBoardAccess().getWifiSelectWifiConfigIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getNewBoardAccess().getWifiSelectWifiConfigCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NewBoard__SensorsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNewBoardAccess().getSensorsSensorParserRuleCall_5_0()); }
		ruleSensor
		{ after(grammarAccess.getNewBoardAccess().getSensorsSensorParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardVersionAccess().getTypeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBoardVersionAccess().getTypeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoardVersion__ModelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardVersionAccess().getModelIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getBoardVersionAccess().getModelIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendsBoardAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getExtendsBoardAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__AbstractBoardAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendsBoardAccess().getAbstractBoardAbstractBoardCrossReference_2_0()); }
		(
			{ before(grammarAccess.getExtendsBoardAccess().getAbstractBoardAbstractBoardIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExtendsBoardAccess().getAbstractBoardAbstractBoardIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getExtendsBoardAccess().getAbstractBoardAbstractBoardCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__WifiSelectAssignment_3_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendsBoardAccess().getWifiSelectWifiConfigCrossReference_3_2_1_0()); }
		(
			{ before(grammarAccess.getExtendsBoardAccess().getWifiSelectWifiConfigIDTerminalRuleCall_3_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExtendsBoardAccess().getWifiSelectWifiConfigIDTerminalRuleCall_3_2_1_0_1()); }
		)
		{ after(grammarAccess.getExtendsBoardAccess().getWifiSelectWifiConfigCrossReference_3_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendsBoard__SensorsAssignment_3_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendsBoardAccess().getSensorsSensorParserRuleCall_3_3_0()); }
		ruleSensor
		{ after(grammarAccess.getExtendsBoardAccess().getSensorsSensorParserRuleCall_3_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractBoardAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAbstractBoardAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__VersionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractBoardAccess().getVersionBoardVersionParserRuleCall_5_0()); }
		ruleBoardVersion
		{ after(grammarAccess.getAbstractBoardAccess().getVersionBoardVersionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractBoard__SensorsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractBoardAccess().getSensorsSensorParserRuleCall_6_0()); }
		ruleSensor
		{ after(grammarAccess.getAbstractBoardAccess().getSensorsSensorParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SensortypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSensortypeSensorTypeParserRuleCall_3_0()); }
		ruleSensorType
		{ after(grammarAccess.getSensorAccess().getSensortypeSensorTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__VarsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getVarsSensorVariablesParserRuleCall_5_0()); }
		ruleSensorVariables
		{ after(grammarAccess.getSensorAccess().getVarsSensorVariablesParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__SamplerAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getSamplerSamplerParserRuleCall_8_1_0()); }
		ruleSampler
		{ after(grammarAccess.getSensorAccess().getSamplerSamplerParserRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__VccAssignment_9_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getVccINTTerminalRuleCall_9_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSensorAccess().getVccINTTerminalRuleCall_9_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__OutputAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getOutputSensorOutputParserRuleCall_10_0()); }
		ruleSensorOutput
		{ after(grammarAccess.getSensorAccess().getOutputSensorOutputParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalSensorAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getExternalSensorAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__PinsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalSensorAccess().getPinsINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getExternalSensorAccess().getPinsINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalSensor__PinsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalSensorAccess().getPinsINTTerminalRuleCall_3_1_0()); }
		RULE_INT
		{ after(grammarAccess.getExternalSensorAccess().getPinsINTTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnboardSensor__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnboardSensorAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getOnboardSensorAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorVariablesAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSensorVariablesAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__IdsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorVariablesAccess().getIdsVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getSensorVariablesAccess().getIdsVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorVariables__IdsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorVariablesAccess().getIdsVariableParserRuleCall_3_1_0()); }
		ruleVariable
		{ after(grammarAccess.getSensorVariablesAccess().getIdsVariableParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCommandSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCommandAccess().getCommandSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__TopicAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getTopicSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCommandAccess().getTopicSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__FrequencyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getFrequencyINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getFrequencyAccess().getFrequencyINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Frequency__ResolutionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrequencyAccess().getResolutionResolutionParserRuleCall_2_0()); }
		ruleResolution
		{ after(grammarAccess.getFrequencyAccess().getResolutionResolutionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__OutputAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorOutputAccess().getOutputDataOutputParserRuleCall_1_0()); }
		ruleDataOutput
		{ after(grammarAccess.getSensorOutputAccess().getOutputDataOutputParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__ChannelAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorOutputAccess().getChannelChannelCrossReference_3_0()); }
		(
			{ before(grammarAccess.getSensorOutputAccess().getChannelChannelIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSensorOutputAccess().getChannelChannelIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getSensorOutputAccess().getChannelChannelCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorOutput__ChannelAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorOutputAccess().getChannelChannelCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getSensorOutputAccess().getChannelChannelIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSensorOutputAccess().getChannelChannelIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getSensorOutputAccess().getChannelChannelCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataOutput__SensorvarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataOutputAccess().getSensorvarSensorVariablesCrossReference_0_0()); }
		(
			{ before(grammarAccess.getDataOutputAccess().getSensorvarSensorVariablesIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDataOutputAccess().getSensorvarSensorVariablesIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getDataOutputAccess().getSensorvarSensorVariablesCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataOutput__PipelineAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataOutputAccess().getPipelinePipelineParserRuleCall_1_0()); }
		rulePipeline
		{ after(grammarAccess.getDataOutputAccess().getPipelinePipelineParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__NextAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getNextPipelineParserRuleCall_2_0()); }
		rulePipeline
		{ after(grammarAccess.getPipelineAccess().getNextPipelineParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__FunctionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getFunctionFunctionCrossReference_0_0()); }
		(
			{ before(grammarAccess.getExternalAccess().getFunctionFunctionIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExternalAccess().getFunctionFunctionIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getExternalAccess().getFunctionFunctionCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__InputAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getInputExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getExternalAccess().getInputExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__InputAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getInputExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExternalAccess().getInputExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapPipelineAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getMapPipelineAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapPipeline__OutputAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapPipelineAccess().getOutputVariableParserRuleCall_5_0()); }
		ruleVariable
		{ after(grammarAccess.getMapPipelineAccess().getOutputVariableParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__WidthAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWindowPipelineAccess().getWidthINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getWindowPipelineAccess().getWidthINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WindowPipeline__ExecuteAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWindowPipelineAccess().getExecuteExecutePipelineParserRuleCall_6_0()); }
		ruleExecutePipeline
		{ after(grammarAccess.getWindowPipelineAccess().getExecuteExecutePipelineParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__CorrectAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getCorrectConditionalParserRuleCall_1_2_0()); }
		ruleConditional
		{ after(grammarAccess.getConditionalAccess().getCorrectConditionalParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__IncorrectAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getIncorrectConditionalParserRuleCall_1_4_0()); }
		ruleConditional
		{ after(grammarAccess.getConditionalAccess().getIncorrectConditionalParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getOrAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getAndAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_0_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_0_2_0()); }
		ruleSubAdd
		{ after(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_1_2_0()); }
		ruleSubAdd
		{ after(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_2_2_0()); }
		ruleSubAdd
		{ after(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_3_2_0()); }
		ruleSubAdd
		{ after(grammarAccess.getComparisonAccess().getRightSubAddParserRuleCall_1_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAddAccess().getRightMulDivParserRuleCall_1_0_2_0()); }
		ruleMulDiv
		{ after(grammarAccess.getSubAddAccess().getRightMulDivParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubAdd__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubAddAccess().getRightMulDivParserRuleCall_1_1_2_0()); }
		ruleMulDiv
		{ after(grammarAccess.getSubAddAccess().getRightMulDivParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivAccess().getRightNegationParserRuleCall_1_0_2_0()); }
		ruleNegation
		{ after(grammarAccess.getMulDivAccess().getRightNegationParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulDiv__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulDivAccess().getRightNegationParserRuleCall_1_1_2_0()); }
		ruleNegation
		{ after(grammarAccess.getMulDivAccess().getRightNegationParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Negation__ValueAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationAccess().getValueExponentParserRuleCall_0_2_0()); }
		ruleExponent
		{ after(grammarAccess.getNegationAccess().getValueExponentParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exponent__PowerAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExponentAccess().getPowerNegationParserRuleCall_1_2_0()); }
		ruleNegation
		{ after(grammarAccess.getExponentAccess().getPowerNegationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__ValueAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getValuePrimaryParserRuleCall_0_2_0()); }
		rulePrimary
		{ after(grammarAccess.getNotAccess().getValuePrimaryParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getRefIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getReferenceAccess().getRefIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__StrAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getStrSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getStrSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__NumbAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getNumbNUMBERParserRuleCall_0()); }
		ruleNUMBER
		{ after(grammarAccess.getNumberLiteralAccess().getNumbNUMBERParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__BoolAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getBoolBOOLEANTerminalRuleCall_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getBooleanLiteralAccess().getBoolBOOLEANTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
