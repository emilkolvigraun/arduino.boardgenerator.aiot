/*
 * generated by Xtext 2.21.0
 */
package org.xtext.mdsd.arduino.boardgenerator.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.xtext.mdsd.arduino.boardgenerator.validation.IoTValidator
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import static extension org.eclipse.xtext.EcoreUtil2.*
import org.xtext.mdsd.arduino.boardgenerator.ioT.Sensor
import org.xtext.mdsd.arduino.boardgenerator.ioT.Channel
import org.xtext.mdsd.arduino.boardgenerator.ioT.FunctionInputType

/**
 * Custom quickfixes. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class IoTQuickfixProvider extends DefaultQuickfixProvider {
	 
	@Fix(IoTValidator.NO_SUPPORT_FOR_SENSOR)  
	def newSensor(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(issue, "Assign pins",  
			null, null, [element, context |  
				var sensor = element.getContainerOfType(Sensor)
				var pins = '''''' 
				for (i:0 ..< sensor.vars.ids.size()){  
					pins += '''«i», '''
				}
				context.xtextDocument.replace(NodeModelUtils.getNode(element).endOffset, 0, ''' («pins.substring(0, pins.length-2)»)''')
			]) 
	} 
	
	@Fix(IoTValidator.INVALID_FUNCTION_TYPE)
	def invalidExternalType(Issue issue, IssueResolutionAcceptor acceptor){ 
		acceptor.accept(issue, '''Change to string - "str"''',   
			null, null, [element, context |      
				var node = NodeModelUtils.getNode(element)
				var ftype = element.getContainerOfType(FunctionInputType) 
				context.xtextDocument.replace(node.endOffset-ftype.name.length, ftype.name.length, '''str''')
			])   
		acceptor.accept(issue, '''Change to number - "num"''',   
			null, null, [element, context |      
				var node = NodeModelUtils.getNode(element)  
				var ftype = element.getContainerOfType(FunctionInputType)  
				context.xtextDocument.replace(node.endOffset-ftype.name.length, ftype.name.length, '''num''')
			])   
		acceptor.accept(issue, '''Change to boolean - "bool"''',    
			null, null, [element, context |       
				var node = NodeModelUtils.getNode(element)  
				var ftype = element.getContainerOfType(FunctionInputType)
				context.xtextDocument.replace(node.endOffset-ftype.name.length, ftype.name.length, '''bool''')
			]) 
	}
	
	@Fix(IoTValidator.INVALID_CHANNEL_TYPE)
	def invalidChannelType(Issue issue, IssueResolutionAcceptor acceptor){ 
		acceptor.accept(issue, '''Change to SERIAL - "serial"''',   
			null, null, [element, context |      
				var node = NodeModelUtils.getNode(element)
				var channel = element.getContainerOfType(Channel)
				context.xtextDocument.replace(node.endOffset-node.length, channel.ctype.name.length, '''serial''')
			])     
		acceptor.accept(issue, '''Change to CLOUD - "cloud"''',   
			null, null, [element, context |       
				var node = NodeModelUtils.getNode(element)
				var channel = element.getContainerOfType(Channel)
				context.xtextDocument.replace(node.endOffset-node.length, channel.ctype.name.length, '''cloud''')
			])   
		acceptor.accept(issue, '''Change to MQTT - "mqtt"''',     
			null, null, [element, context |      
				var node = NodeModelUtils.getNode(element) 
				var channel = element.getContainerOfType(Channel)
				context.xtextDocument.replace(node.endOffset-node.length, channel.ctype.name.length, '''mqtt''')
			]) 
	}
}
